"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("src/middleware",{

/***/ "(middleware)/./src/middleware.ts":
/*!***************************!*\
  !*** ./src/middleware.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   middleware: () => (/* binding */ middleware)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(middleware)/./node_modules/next/dist/esm/api/server.js\");\n/* harmony import */ var jwt_decode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jwt-decode */ \"(middleware)/./node_modules/jwt-decode/build/esm/index.js\");\n\n\n// Define admin paths that need protection\nconst ADMIN_PATHS = [\n    \"/admin\"\n];\n// Public paths that don't require authentication\n// Only include authentication-related paths and non-admin paths\nconst PUBLIC_PATHS = [\n    \"/admin/login\",\n    \"/admin/signup\",\n    \"/admin/verify\",\n    \"/admin/forgot-password\",\n    \"/\",\n    \"/favicon.ico\",\n    \"/_next/\",\n    \"/s/\",\n    \"/survey/\",\n    \"/completion/\",\n    \"/sorry-quota-full\",\n    \"/sorry-disqualified\",\n    \"/thank-you-completed\"\n];\n// Domain configuration\nconst MAIN_DOMAIN = \"protegeresearchsurvey.com\" || 0;\nconst ADMIN_DOMAIN = \"admin.protegeresearchsurvey.com\" || 0;\n// Cognito User Pool ID - will be auto-detected in development mode\nconst COGNITO_USER_POOL_ID =  true ? \"us-east-1_SANDBOX\" // This will be overridden by the validation logic\n : 0;\n/**\r\n * Apply security headers to the response\r\n */ function applySecurityHeaders(response, isAdminRoute) {\n    // Define security headers\n    const securityHeaders = {\n        // Prevent MIME type sniffing\n        \"X-Content-Type-Options\": \"nosniff\",\n        // Prevent clickjacking\n        \"X-Frame-Options\": \"DENY\",\n        // XSS Protection header (legacy browsers)\n        \"X-XSS-Protection\": \"1; mode=block\",\n        // Disable client-side caching for sensitive areas\n        \"Cache-Control\": isAdminRoute ? \"no-store, max-age=0\" : \"public, max-age=300\",\n        // Referrer Policy\n        \"Referrer-Policy\": \"strict-origin-when-cross-origin\"\n    };\n    // Apply headers to response\n    Object.entries(securityHeaders).forEach(([key, value])=>{\n        response.headers.set(key, value);\n    });\n    return response;\n}\n/**\r\n * Validate the JWT token from Cognito\r\n * @param token JWT token to validate\r\n * @returns boolean indicating if token is valid\r\n */ function validateToken(token) {\n    try {\n        // For development mode sandbox testing\n        if (true) {\n            // Special case: if we've created a temporary sandbox token, consider it valid\n            if (token === \"dev-sandbox-token\") {\n                console.log(\"Development mode: Using temporary sandbox token\");\n                return true;\n            }\n        }\n        // Basic format check\n        if (!token || !token.includes(\".\")) {\n            console.log(\"Invalid token format\");\n            return false;\n        }\n        // Decode the token\n        const decodedToken = (0,jwt_decode__WEBPACK_IMPORTED_MODULE_1__.jwtDecode)(token);\n        console.log(\"Token decoded:\", {\n            sub: decodedToken.sub,\n            exp: decodedToken.exp,\n            iss: decodedToken.iss\n        });\n        // Check token expiration - allow expired tokens in development\n        const currentTime = Math.floor(Date.now() / 1000);\n        if (!decodedToken.exp) {\n            console.log(\"Token missing expiration\");\n            if (true) {\n                // Allow tokens without expiration in development\n                console.log(\"Token missing expiration but allowing in development mode\");\n            } else {}\n        }\n        if (decodedToken.exp && decodedToken.exp < currentTime) {\n            if (true) {\n                console.log(\"Token expired but allowing in development mode\");\n            } else {}\n        }\n        // In development/sandbox environment, be more flexible with issuer validation\n        if (true) {\n            // For sandbox, check if the token has typical JWT fields or allow any valid JWT\n            console.log(\"Development mode: Simplified token validation\");\n            return true;\n        }\n        // In production, check the exact issuer\n        if (false) {}\n        // Token is valid\n        return true;\n    } catch (error) {\n        console.error(\"Token validation error:\", error);\n        return false;\n    }\n}\n/**\r\n * Check if a path is public (doesn't require authentication)\r\n */ function isPublicPath(pathname) {\n    // Check exact matches first\n    if (PUBLIC_PATHS.includes(pathname)) {\n        return true;\n    }\n    // Check auth routes first since they must remain accessible\n    const authRoutes = [\n        \"/admin/login\",\n        \"/admin/signup\",\n        \"/admin/verify\",\n        \"/admin/forgot-password\"\n    ];\n    if (authRoutes.some((route)=>pathname === route)) {\n        return true;\n    }\n    // Check path prefixes\n    return PUBLIC_PATHS.some((publicPath)=>pathname.startsWith(publicPath) && // Ensure we don't accidentally match admin paths that should be protected\n        !(pathname.startsWith(\"/admin\") && !pathname.startsWith(\"/admin/login\") && !pathname.startsWith(\"/admin/signup\") && !pathname.startsWith(\"/admin/verify\") && !pathname.startsWith(\"/admin/forgot-password\")));\n}\nasync function middleware(request) {\n    const { pathname, host } = request.nextUrl;\n    console.log(`Middleware processing: ${pathname} on host: ${host}`);\n    // For local development\n    const isLocalhost = host.includes(\"localhost\") || host.includes(\"127.0.0.1\");\n    // For Amplify preview environments\n    const isAmplifyDomain = host.includes(\"amplifyapp.com\");\n    // Check if we're on the admin subdomain\n    const isAdminDomain = host === ADMIN_DOMAIN || isLocalhost && pathname.startsWith(\"/admin\") || isAmplifyDomain && pathname.startsWith(\"/admin\");\n    // Always allow access to Next.js static assets and favicon\n    if (pathname.startsWith(\"/_next/\") || pathname === \"/favicon.ico\") {\n        const response = next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.next();\n        return applySecurityHeaders(response, false);\n    }\n    // Special handling for authentication routes - always allow\n    if ([\n        \"/admin/login\",\n        \"/admin/signup\",\n        \"/admin/verify\",\n        \"/admin/forgot-password\"\n    ].some((route)=>pathname === route)) {\n        console.log(`Auth route detected: ${pathname} - allowing access`);\n        const response = next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.next();\n        return applySecurityHeaders(response, true);\n    }\n    // Handle outcome pages - always allow\n    if ([\n        \"/sorry-quota-full\",\n        \"/sorry-disqualified\",\n        \"/thank-you-completed\"\n    ].some((path)=>pathname === path)) {\n        const response = next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.next();\n        return applySecurityHeaders(response, false);\n    }\n    // When in production (not localhost/Amplify preview)\n    if (!isLocalhost && !isAmplifyDomain) {\n        // Correctly handle admin subdomain root\n        if (isAdminDomain && pathname === \"/\") {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.redirect(new URL(\"/admin\", request.url));\n        }\n        // Handle admin login pages directly on subdomain without /admin prefix\n        // This is critical for the login page to work on admin.domain.com/login\n        if (isAdminDomain && (pathname === \"/login\" || pathname === \"/signup\" || pathname === \"/verify\" || pathname === \"/forgot-password\")) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.redirect(new URL(`/admin${pathname}`, request.url));\n        }\n        // Process main domain requests accessing admin section\n        if (host === MAIN_DOMAIN && pathname.startsWith(\"/admin\")) {\n            // On main domain trying to access admin, redirect to admin subdomain\n            const url = new URL(request.url);\n            url.host = ADMIN_DOMAIN;\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.redirect(url);\n        }\n    }\n    // Check if this is an admin route\n    const isAdminRoute = pathname.startsWith(\"/admin\") || isAdminDomain;\n    // If not an admin route, allow access (public-facing routes)\n    if (!isAdminRoute) {\n        console.log(`Non-admin route: ${pathname} - allowing access`);\n        const response = next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.next();\n        return applySecurityHeaders(response, false);\n    }\n    console.log(`Admin route detected: ${pathname}`);\n    // Check if the admin path is public (auth-related paths)\n    if (isPublicPath(pathname)) {\n        console.log(`Public admin path: ${pathname} - allowing access`);\n        const response = next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.next();\n        return applySecurityHeaders(response, true);\n    }\n    // For protected admin routes - check for authentication\n    console.log(\"Protected admin route - checking auth\");\n    // Check for authentication token\n    const authToken = request.cookies.get(\"idToken\")?.value;\n    const accessToken = request.cookies.get(\"accessToken\")?.value; // When in development mode with sandbox, be more flexible\n    if (true) {\n        console.log(\"Development mode: Found tokens:\", !!authToken, !!accessToken);\n        // In sandbox mode, validate the token but be more flexible\n        if (authToken || accessToken) {\n            // Use the token we have - prefer idToken, fall back to accessToken\n            const tokenToValidate = authToken || accessToken || \"\";\n            console.log(\"Development mode: Checking auth token validity\");\n            if (validateToken(tokenToValidate)) {\n                console.log(\"Development mode: Valid token - allowing access\");\n                const response = next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.next();\n                return applySecurityHeaders(response, true);\n            } else {\n                console.log(\"Development mode: Invalid token - redirecting to login\");\n            }\n        } // If the user is coming from the login page, check for redirect loop\n        const referer = request.headers.get(\"referer\") || \"\";\n        if (referer.includes(\"/login\") && pathname === \"/admin\") {\n            console.log(\"Development mode - potential redirect loop from login page detected\");\n            // Just redirect to login rather than creating a fake token\n            const loginUrl = new URL(\"/admin/login\", request.url);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.redirect(loginUrl);\n        }\n    } else {}\n    // If we get here, authentication failed\n    console.log(\"Not authenticated or invalid token - redirecting to login\");\n    // Don't create redirect loops - if we're already on or coming from login page\n    const referer = request.headers.get(\"referer\") || \"\";\n    if (referer.includes(\"/login\") && pathname === \"/admin\") {\n        console.log(\"Preventing redirect loop - user is coming from login page\");\n        // For sandbox testing, if we detect we're in a login loop in development mode\n        // create a special sandbox session token that will bypass auth checks\n        if ( true && (isLocalhost || isAmplifyDomain)) {\n            console.log(\"Creating sandbox development token to break login loop\");\n            const response = next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.next();\n            response.cookies.set(\"idToken\", \"dev-sandbox-token\", {\n                path: \"/\",\n                maxAge: 3600,\n                httpOnly: true,\n                secure: !isLocalhost // Only use secure in non-localhost environments\n            });\n            return applySecurityHeaders(response, true);\n        }\n        const response = next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.next();\n        return applySecurityHeaders(response, true);\n    }\n    const returnUrl = encodeURIComponent(pathname);\n    const loginUrl = new URL(`/admin/login?redirect=${returnUrl}`, request.url);\n    const response = next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.redirect(loginUrl);\n    return applySecurityHeaders(response, true);\n}\n// Configure matchers to run middleware on all paths\nconst config = {\n    matcher: [\n        // Match all paths for proper routing\n        \"/(.*)\"\n    ]\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./src/middleware.ts\n");

/***/ })

});