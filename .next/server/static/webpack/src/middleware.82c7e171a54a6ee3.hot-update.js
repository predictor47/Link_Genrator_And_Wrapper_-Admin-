"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("src/middleware",{

/***/ "(middleware)/./src/middleware.ts":
/*!***************************!*\
  !*** ./src/middleware.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   middleware: () => (/* binding */ middleware)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(middleware)/./node_modules/next/dist/esm/api/server.js\");\n/* harmony import */ var jwt_decode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jwt-decode */ \"(middleware)/./node_modules/jwt-decode/build/esm/index.js\");\n\n\n// Define admin paths that need protection\nconst ADMIN_PATHS = [\n    \"/admin\"\n];\n// Public paths that don't require authentication\n// Only include authentication-related paths and non-admin paths\nconst PUBLIC_PATHS = [\n    \"/admin/login\",\n    \"/admin/signup\",\n    \"/admin/verify\",\n    \"/admin/forgot-password\",\n    \"/\",\n    \"/favicon.ico\",\n    \"/_next/\",\n    \"/public/\",\n    \"/api/\",\n    \"/assets/\",\n    \"/s/\",\n    \"/survey/\",\n    \"/completion/\",\n    \"/sorry-quota-full\",\n    \"/sorry-disqualified\",\n    \"/thank-you-completed\",\n    \"/diagnostics\",\n    \"/amplify_outputs.json\" // Allow access to amplify outputs for configuration\n];\n// Domain configuration\nconst MAIN_DOMAIN = \"localhost:3000\" || 0;\n// Cognito User Pool ID - will be auto-detected in development mode\nconst COGNITO_USER_POOL_ID =  true ? \"us-east-1_SANDBOX\" // This will be overridden by the validation logic\n : 0;\n/**\n * Apply security headers to the response\n */ function applySecurityHeaders(response, isAdminRoute) {\n    // Define security headers\n    const securityHeaders = {\n        // Prevent MIME type sniffing\n        \"X-Content-Type-Options\": \"nosniff\",\n        // Prevent clickjacking\n        \"X-Frame-Options\": \"DENY\",\n        // XSS Protection header (legacy browsers)\n        \"X-XSS-Protection\": \"1; mode=block\",\n        // Disable client-side caching for sensitive areas\n        \"Cache-Control\": isAdminRoute ? \"no-store, max-age=0\" : \"public, max-age=300\",\n        // Referrer Policy\n        \"Referrer-Policy\": \"strict-origin-when-cross-origin\"\n    };\n    // Apply headers to response\n    Object.entries(securityHeaders).forEach(([key, value])=>{\n        response.headers.set(key, value);\n    });\n    return response;\n}\n/**\n * Validate the JWT token from Cognito\n * @param token JWT token to validate\n * @returns boolean indicating if token is valid\n */ function validateToken(token) {\n    try {\n        // No more special case for a development sandbox token\n        // We need to let Amplify handle the real tokens\n        // Basic format check\n        if (!token || !token.includes(\".\")) {\n            console.log(\"Invalid token format\");\n            return false;\n        }\n        // Decode the token\n        const decodedToken = (0,jwt_decode__WEBPACK_IMPORTED_MODULE_1__.jwtDecode)(token);\n        console.log(\"Token decoded:\", {\n            sub: decodedToken.sub,\n            exp: decodedToken.exp,\n            iss: decodedToken.iss\n        });\n        // Check token expiration - allow expired tokens in development\n        const currentTime = Math.floor(Date.now() / 1000);\n        if (!decodedToken.exp) {\n            console.log(\"Token missing expiration\");\n            if (true) {\n                // Allow tokens without expiration in development\n                console.log(\"Token missing expiration but allowing in development mode\");\n            } else {}\n        }\n        if (decodedToken.exp && decodedToken.exp < currentTime) {\n            if (true) {\n                console.log(\"Token expired but allowing in development mode\");\n            } else {}\n        }\n        // In development/sandbox environment, be more flexible with issuer validation\n        if (true) {\n            // For sandbox, check if the token has typical JWT fields or allow any valid JWT\n            console.log(\"Development mode: Simplified token validation\");\n            return true;\n        }\n        // In production, check the exact issuer\n        if (false) {}\n        // Token is valid\n        return true;\n    } catch (error) {\n        console.error(\"Token validation error:\", error);\n        return false;\n    }\n}\n/**\n * Check if a path is public (doesn't require authentication)\n */ function isPublicPath(pathname) {\n    // Check exact matches first\n    if (PUBLIC_PATHS.includes(pathname)) {\n        return true;\n    }\n    // Always allow access to authentication and public routes\n    const authRoutes = [\n        \"/admin/login\",\n        \"/admin/signup\",\n        \"/admin/verify\",\n        \"/admin/forgot-password\"\n    ];\n    if (authRoutes.some((route)=>pathname === route)) {\n        return true;\n    }\n    // Check path prefixes for static assets and public paths\n    return PUBLIC_PATHS.some((publicPath)=>pathname.startsWith(publicPath) && // Ensure we don't accidentally match admin paths that should be protected\n        !(pathname.startsWith(\"/admin\") && !pathname.startsWith(\"/admin/login\") && !pathname.startsWith(\"/admin/signup\") && !pathname.startsWith(\"/admin/verify\") && !pathname.startsWith(\"/admin/forgot-password\")));\n}\n// Update the isAdminRoute function to properly handle login paths\nfunction isAdminRoute(pathname) {\n    // Admin routes start with /admin, but exclude login-related routes to prevent loops\n    return pathname.startsWith(\"/admin\") && !pathname.includes(\"/admin/login\") && !pathname.includes(\"/admin/signup\") && !pathname.includes(\"/admin/verify\") && !pathname.includes(\"/admin/forgot-password\") && !pathname.includes(\"/api/auth\");\n}\n// Update the middleware handler function\nasync function middleware(request) {\n    const { pathname } = request.nextUrl;\n    const hostname = request.headers.get(\"host\") || \"\";\n    // Always allow access to diagnostics page - useful for debugging\n    if (pathname === \"/diagnostics\") {\n        console.log(\"Allowing access to diagnostics page\");\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.next();\n    }\n    // Log request details to help debug\n    console.log(`Middleware processing: ${pathname} on host: ${hostname}`);\n    // Add redirect count to help debug redirect loops\n    const redirectCount = request.cookies.get(\"redirect_count\");\n    let count = redirectCount ? parseInt(redirectCount.value, 10) : 0;\n    count++;\n    // Always clear redirect count cookie for login routes\n    if (pathname === \"/admin/login\") {\n        const response = next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.next();\n        response.cookies.set(\"redirect_count\", \"0\", {\n            maxAge: 60 * 60 * 24,\n            path: \"/\"\n        });\n        console.log(\"On login page, resetting redirect count\");\n        return response;\n    }\n    // If count gets too high, we're probably in a loop - allow the request through\n    if (count > 5) {\n        console.log(\"Detected potential redirect loop (count: \" + count + \") - allowing request\");\n        const response = next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.next();\n        response.cookies.set(\"redirect_count\", \"0\", {\n            maxAge: 60 * 60 * 24,\n            path: \"/\"\n        });\n        return response;\n    }\n    // Store the updated redirect count\n    const response = next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.next();\n    response.cookies.set(\"redirect_count\", count.toString(), {\n        maxAge: 60 * 60 * 24,\n        path: \"/\"\n    });\n    // Handle public paths - no auth needed\n    if (isPublicPath(pathname)) {\n        console.log(`Public path detected [${pathname}]: allowing access`);\n        return applySecurityHeaders(response, false);\n    }\n    // If this is an admin route, we need to check authentication (works on any domain)\n    if (isAdminRoute(pathname)) {\n        console.log(\"Protected admin route - checking auth\");\n        // Check for authentication token in cookies\n        const authCookie = request.cookies.get(\"idToken\")?.value;\n        const accessToken = request.cookies.get(\"accessToken\")?.value;\n        // If no token found, redirect to login\n        if (!authCookie && !accessToken) {\n            console.log(\"No auth token found - redirecting to login\");\n            // Create a login URL with proper redirect parameter\n            const url = new URL(\"/admin/login\", request.url);\n            // Only add redirect if it's not already the login page to avoid loops\n            if (pathname !== \"/admin/login\") {\n                url.searchParams.set(\"redirect\", pathname);\n            }\n            const redirectResponse = next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.redirect(url);\n            // Update redirect count\n            redirectResponse.cookies.set(\"redirect_count\", count.toString(), {\n                maxAge: 60 * 60 * 24,\n                path: \"/\"\n            });\n            return applySecurityHeaders(redirectResponse, true);\n        }\n        // Use the first available token\n        const token = authCookie || accessToken || \"\";\n        // If token is invalid or empty, redirect to login\n        if (!token || !validateToken(token)) {\n            console.log(\"Invalid token - redirecting to login\");\n            // Redirect to login page with return URL\n            const url = new URL(\"/admin/login\", request.url);\n            url.searchParams.set(\"redirect\", pathname);\n            url.searchParams.set(\"fixed\", \"true\"); // Add fixed param to avoid loops\n            const redirectResponse = next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.redirect(url);\n            // Clear invalid tokens\n            const cookiesToClear = [\n                \"idToken\",\n                \"accessToken\",\n                \"refreshToken\",\n                \"amplify-signin-with-hostedUI\",\n                \"amplify-redirected-from-hosted-ui\",\n                \"amplify.auth.tokens\",\n                \"Authorization\"\n            ];\n            cookiesToClear.forEach((cookie)=>{\n                redirectResponse.cookies.delete(cookie);\n            });\n            return applySecurityHeaders(redirectResponse, true);\n        }\n        // Token is valid, allow access to admin routes\n        console.log(\"Valid token found - allowing admin access\");\n        return applySecurityHeaders(response, true);\n    }\n    // Default: apply security headers and continue\n    return applySecurityHeaders(response, pathname.startsWith(\"/admin\"));\n}\n// Configure matchers to run middleware on all paths\nconst config = {\n    matcher: [\n        // Match all paths for proper routing\n        \"/(.*)\"\n    ]\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./src/middleware.ts\n");

/***/ })

});