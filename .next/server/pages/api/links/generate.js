"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/links/generate";
exports.ids = ["pages/api/links/generate"];
exports.modules = {

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "aws-amplify":
/*!******************************!*\
  !*** external "aws-amplify" ***!
  \******************************/
/***/ ((module) => {

module.exports = import("aws-amplify");;

/***/ }),

/***/ "aws-amplify/api":
/*!**********************************!*\
  !*** external "aws-amplify/api" ***!
  \**********************************/
/***/ ((module) => {

module.exports = import("aws-amplify/api");;

/***/ }),

/***/ "aws-amplify/auth":
/*!***********************************!*\
  !*** external "aws-amplify/auth" ***!
  \***********************************/
/***/ ((module) => {

module.exports = import("aws-amplify/auth");;

/***/ }),

/***/ "nanoid":
/*!*************************!*\
  !*** external "nanoid" ***!
  \*************************/
/***/ ((module) => {

module.exports = import("nanoid");;

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Flinks%2Fgenerate&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Flinks%2Fgenerate.ts&middlewareConfigBase64=e30%3D!":
/*!********************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Flinks%2Fgenerate&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Flinks%2Fgenerate.ts&middlewareConfigBase64=e30%3D! ***!
  \********************************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _src_pages_api_links_generate_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/pages/api/links/generate.ts */ \"(api)/./src/pages/api/links/generate.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_src_pages_api_links_generate_ts__WEBPACK_IMPORTED_MODULE_3__]);\n_src_pages_api_links_generate_ts__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_src_pages_api_links_generate_ts__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_src_pages_api_links_generate_ts__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/links/generate\",\n        pathname: \"/api/links/generate\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _src_pages_api_links_generate_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmxpbmtzJTJGZ2VuZXJhdGUmcHJlZmVycmVkUmVnaW9uPSZhYnNvbHV0ZVBhZ2VQYXRoPS4lMkZzcmMlMkZwYWdlcyUyRmFwaSUyRmxpbmtzJTJGZ2VuZXJhdGUudHMmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ0w7QUFDMUQ7QUFDOEQ7QUFDOUQ7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLDZEQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLGVBQWUsd0VBQUssQ0FBQyw2REFBUTtBQUNwQztBQUNPLHdCQUF3QixnSEFBbUI7QUFDbEQ7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWTtBQUNaLENBQUM7O0FBRUQscUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdXJ2ZXktbGluay13cmFwcGVyLz8zYTZlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2VzQVBJUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgaG9pc3QgfSBmcm9tIFwibmV4dC9kaXN0L2J1aWxkL3RlbXBsYXRlcy9oZWxwZXJzXCI7XG4vLyBJbXBvcnQgdGhlIHVzZXJsYW5kIGNvZGUuXG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiLi9zcmMvcGFnZXMvYXBpL2xpbmtzL2dlbmVyYXRlLnRzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsIFwiZGVmYXVsdFwiKTtcbi8vIFJlLWV4cG9ydCBjb25maWcuXG5leHBvcnQgY29uc3QgY29uZmlnID0gaG9pc3QodXNlcmxhbmQsIFwiY29uZmlnXCIpO1xuLy8gQ3JlYXRlIGFuZCBleHBvcnQgdGhlIHJvdXRlIG1vZHVsZSB0aGF0IHdpbGwgYmUgY29uc3VtZWQuXG5leHBvcnQgY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgUGFnZXNBUElSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuUEFHRVNfQVBJLFxuICAgICAgICBwYWdlOiBcIi9hcGkvbGlua3MvZ2VuZXJhdGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9saW5rcy9nZW5lcmF0ZVwiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcIlwiXG4gICAgfSxcbiAgICB1c2VybGFuZFxufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2VzLWFwaS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Flinks%2Fgenerate&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Flinks%2Fgenerate.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./src/lib/amplify-config.ts":
/*!***********************************!*\
  !*** ./src/lib/amplify-config.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAmplifyConfig: () => (/* binding */ getAmplifyConfig)\n/* harmony export */ });\n/* harmony import */ var _amplify_outputs_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../amplify_outputs.json */ \"(api)/./amplify_outputs.json\");\n\n// Export the Amplify Gen 2 configuration\nfunction getAmplifyConfig() {\n    return _amplify_outputs_json__WEBPACK_IMPORTED_MODULE_0__;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvbGliL2FtcGxpZnktY29uZmlnLnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXdEO0FBRXhELHlDQUF5QztBQUNsQyxTQUFTQztJQUNkLE9BQU9ELGtEQUFjQTtBQUN2QiIsInNvdXJjZXMiOlsid2VicGFjazovL3N1cnZleS1saW5rLXdyYXBwZXIvLi9zcmMvbGliL2FtcGxpZnktY29uZmlnLnRzPzRhYjYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGFtcGxpZnlPdXRwdXRzIGZyb20gJy4uLy4uL2FtcGxpZnlfb3V0cHV0cy5qc29uJztcblxuLy8gRXhwb3J0IHRoZSBBbXBsaWZ5IEdlbiAyIGNvbmZpZ3VyYXRpb25cbmV4cG9ydCBmdW5jdGlvbiBnZXRBbXBsaWZ5Q29uZmlnKCkge1xuICByZXR1cm4gYW1wbGlmeU91dHB1dHM7XG59Il0sIm5hbWVzIjpbImFtcGxpZnlPdXRwdXRzIiwiZ2V0QW1wbGlmeUNvbmZpZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./src/lib/amplify-config.ts\n");

/***/ }),

/***/ "(api)/./src/lib/amplify-data-service.ts":
/*!*****************************************!*\
  !*** ./src/lib/amplify-data-service.ts ***!
  \*****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAmplifyDataService: () => (/* binding */ getAmplifyDataService)\n/* harmony export */ });\n/* harmony import */ var aws_amplify_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! aws-amplify/api */ \"aws-amplify/api\");\n/* harmony import */ var aws_amplify__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! aws-amplify */ \"aws-amplify\");\n/* harmony import */ var _amplify_config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./amplify-config */ \"(api)/./src/lib/amplify-config.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([aws_amplify_api__WEBPACK_IMPORTED_MODULE_0__, aws_amplify__WEBPACK_IMPORTED_MODULE_1__]);\n([aws_amplify_api__WEBPACK_IMPORTED_MODULE_0__, aws_amplify__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\nlet amplifyDataService = null;\nasync function getAmplifyDataService() {\n    if (true) {\n        throw new Error(\"amplifyDataService can only be used on the client/browser.\");\n    }\n    if (amplifyDataService) return amplifyDataService;\n    const amplifyConfig = (0,_amplify_config__WEBPACK_IMPORTED_MODULE_2__.getAmplifyConfig)();\n    if (!amplifyConfig?.data?.url) {\n        throw new Error(\"Amplify config is missing GraphQL endpoint.\");\n    }\n    aws_amplify__WEBPACK_IMPORTED_MODULE_1__.Amplify.configure(amplifyConfig);\n    const client = (0,aws_amplify_api__WEBPACK_IMPORTED_MODULE_0__.generateClient)({\n        authMode: \"userPool\"\n    });\n    // Debug logging\n    console.log(\"Amplify Data client:\", client);\n    console.log(\"client.models:\", client.models);\n    // Check if models are available\n    if (!client.models || Object.keys(client.models).length === 0) {\n        console.error(\"client.models is empty! This usually means the Amplify backend is not properly connected.\");\n        throw new Error(\"Amplify Data models are not available. Please check your backend connection.\");\n    }\n    // Verify required models exist\n    const requiredModels = [\n        \"Project\",\n        \"Vendor\",\n        \"Question\",\n        \"SurveyLink\",\n        \"ProjectVendor\"\n    ];\n    for (const modelName of requiredModels){\n        if (!client.models[modelName]) {\n            console.error(`${modelName} model is missing from Amplify Data client!`);\n            throw new Error(`Required model ${modelName} is not available in the Amplify Data client.`);\n        }\n    }\n    console.log(\"All required models are available:\", requiredModels);\n    // Helper to safely unwrap data from Amplify responses\n    const unwrapData = (result)=>result.data;\n    // Helper to handle Amplify errors in a consistent way\n    const handleAmplifyError = (error, operation)=>{\n        const errorMessage = error.message || \"Unknown error\";\n        const errorName = error.name || \"Error\";\n        console.error(`Amplify Error (${operation}):`, {\n            name: errorName,\n            message: errorMessage\n        });\n        throw error;\n    };\n    amplifyDataService = {\n        client,\n        projects: {\n            create: async (data)=>{\n                try {\n                    const result = await client.models.Project.create(data);\n                    return {\n                        data: unwrapData(result)\n                    };\n                } catch (error) {\n                    handleAmplifyError(error, \"projects.create\");\n                    return {\n                        data: null\n                    };\n                }\n            },\n            get: async (id)=>{\n                const result = await client.models.Project.get({\n                    id\n                });\n                return {\n                    data: unwrapData(result)\n                };\n            },\n            list: async (filter)=>{\n                const result = await client.models.Project.list(filter);\n                return {\n                    data: result.data || []\n                };\n            },\n            update: async (id, data)=>{\n                const result = await client.models.Project.update({\n                    id,\n                    ...data\n                });\n                return {\n                    data: unwrapData(result)\n                };\n            },\n            delete: async (id)=>{\n                const result = await client.models.Project.delete({\n                    id\n                });\n                return {\n                    data: unwrapData(result)\n                };\n            },\n            getWithRelations: async (id)=>{\n                // Fetch project and related data separately\n                const project = await client.models.Project.get({\n                    id\n                });\n                if (project.data) {\n                    // Fetch related data separately\n                    const surveyLinks = await client.models.SurveyLink.list({\n                        filter: {\n                            projectId: {\n                                eq: id\n                            }\n                        }\n                    });\n                    // First get ProjectVendor relationships for this project\n                    const projectVendors = await client.models.ProjectVendor.list({\n                        filter: {\n                            projectId: {\n                                eq: id\n                            }\n                        }\n                    });\n                    // Then get the actual vendors if there are project-vendor relationships\n                    const vendorIds = projectVendors.data.map((pv)=>pv.vendorId).filter((id)=>id !== null && id !== undefined);\n                    let vendorData = [];\n                    // Fetch vendors if there are any relationships\n                    if (vendorIds.length > 0) {\n                        const vendorResults = await Promise.all(vendorIds.map((vid)=>client.models.Vendor.get({\n                                id: vid\n                            })));\n                        // Extract data from each result\n                        vendorData = vendorResults.filter((result)=>result.data !== null).map((result)=>result.data);\n                    }\n                    const questions = await client.models.Question.list({\n                        filter: {\n                            projectId: {\n                                eq: id\n                            }\n                        }\n                    });\n                    // Combine project with its related data\n                    return {\n                        data: {\n                            ...project.data,\n                            surveyLinks: surveyLinks.data || [],\n                            vendors: vendorData,\n                            questions: questions.data || []\n                        }\n                    };\n                }\n                return {\n                    data: null\n                };\n            }\n        },\n        surveyLinks: {\n            create: async (data)=>{\n                const result = await client.models.SurveyLink.create(data);\n                return {\n                    data: unwrapData(result)\n                };\n            },\n            get: async (id)=>{\n                const result = await client.models.SurveyLink.get({\n                    id\n                });\n                return {\n                    data: unwrapData(result)\n                };\n            },\n            getByUid: async (uid)=>{\n                const results = await client.models.SurveyLink.list({\n                    filter: {\n                        uid: {\n                            eq: uid\n                        }\n                    }\n                });\n                return {\n                    data: results.data && results.data.length > 0 ? results.data[0] : null\n                };\n            },\n            update: async (id, data)=>{\n                const result = await client.models.SurveyLink.update({\n                    id,\n                    ...data\n                });\n                return {\n                    data: unwrapData(result)\n                };\n            },\n            list: async (filter)=>{\n                const result = await client.models.SurveyLink.list(filter);\n                return {\n                    data: result.data || []\n                };\n            },\n            listByProject: async (projectId)=>{\n                const result = await client.models.SurveyLink.list({\n                    filter: {\n                        projectId: {\n                            eq: projectId\n                        }\n                    }\n                });\n                return {\n                    data: result.data || []\n                };\n            },\n            delete: async (id)=>{\n                const result = await client.models.SurveyLink.delete({\n                    id\n                });\n                return {\n                    data: unwrapData(result)\n                };\n            }\n        },\n        vendors: {\n            create: async (data)=>{\n                const result = await client.models.Vendor.create(data);\n                return {\n                    data: unwrapData(result)\n                };\n            },\n            get: async (id)=>{\n                const result = await client.models.Vendor.get({\n                    id\n                });\n                return {\n                    data: unwrapData(result)\n                };\n            },\n            list: async (filter)=>{\n                const result = await client.models.Vendor.list(filter);\n                return {\n                    data: result.data || []\n                };\n            },\n            listByProject: async (projectId)=>{\n                // Get project-vendor relationships first\n                const projectVendors = await client.models.ProjectVendor.list({\n                    filter: {\n                        projectId: {\n                            eq: projectId\n                        }\n                    }\n                });\n                // Get vendor IDs from relationships\n                const vendorIds = projectVendors.data.map((pv)=>pv.vendorId).filter((id)=>id !== null && id !== undefined);\n                // Fetch each vendor individually if there are any relationships\n                if (vendorIds.length > 0) {\n                    const vendorResults = await Promise.all(vendorIds.map((vid)=>client.models.Vendor.get({\n                            id: vid\n                        })));\n                    // Extract data from each result and filter out nulls\n                    const vendorData = vendorResults.map((result)=>result.data).filter((v)=>v !== null);\n                    return {\n                        data: vendorData\n                    };\n                }\n                return {\n                    data: []\n                };\n            },\n            update: async (id, data)=>{\n                const result = await client.models.Vendor.update({\n                    id,\n                    ...data\n                });\n                return {\n                    data: unwrapData(result)\n                };\n            },\n            delete: async (id)=>{\n                const result = await client.models.Vendor.delete({\n                    id\n                });\n                return {\n                    data: unwrapData(result)\n                };\n            }\n        },\n        questions: {\n            create: async (data)=>{\n                const result = await client.models.Question.create(data);\n                return {\n                    data: unwrapData(result)\n                };\n            },\n            get: async (id)=>{\n                const result = await client.models.Question.get({\n                    id\n                });\n                return {\n                    data: unwrapData(result)\n                };\n            },\n            list: async (filter)=>{\n                const result = await client.models.Question.list(filter);\n                return {\n                    data: result.data || []\n                };\n            },\n            listByProject: async (projectId)=>{\n                const result = await client.models.Question.list({\n                    filter: {\n                        projectId: {\n                            eq: projectId\n                        }\n                    }\n                });\n                return {\n                    data: result.data || []\n                };\n            },\n            update: async (id, data)=>{\n                const result = await client.models.Question.update({\n                    id,\n                    ...data\n                });\n                return {\n                    data: unwrapData(result)\n                };\n            },\n            delete: async (id)=>{\n                const result = await client.models.Question.delete({\n                    id\n                });\n                return {\n                    data: unwrapData(result)\n                };\n            }\n        },\n        // Helper for transactions (not directly supported in Amplify Data, using batch operations)\n        transaction: {\n            execute: async (operations)=>{\n                // Execute operations in sequence\n                const results = [];\n                for (const operation of operations){\n                    const result = await operation;\n                    results.push(result);\n                }\n                return results;\n            }\n        }\n    };\n    return amplifyDataService;\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/lib/amplify-data-service.ts\n");

/***/ }),

/***/ "(api)/./src/lib/amplify-server-service.ts":
/*!*******************************************!*\
  !*** ./src/lib/amplify-server-service.ts ***!
  \*******************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAmplifyServerService: () => (/* binding */ getAmplifyServerService)\n/* harmony export */ });\n/* harmony import */ var aws_amplify__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! aws-amplify */ \"aws-amplify\");\n/* harmony import */ var _amplify_outputs_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../amplify_outputs.json */ \"(api)/./amplify_outputs.json\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([aws_amplify__WEBPACK_IMPORTED_MODULE_0__]);\naws_amplify__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n// Initialize Amplify\naws_amplify__WEBPACK_IMPORTED_MODULE_0__.Amplify.configure(_amplify_outputs_json__WEBPACK_IMPORTED_MODULE_1__);\nclass AmplifyServerService {\n    constructor(){\n        this.apiEndpoint = _amplify_outputs_json__WEBPACK_IMPORTED_MODULE_1__.data.url;\n        this.apiKey = _amplify_outputs_json__WEBPACK_IMPORTED_MODULE_1__.data.api_key;\n    }\n    async makeGraphQLRequest(query, variables = {}) {\n        try {\n            const response = await fetch(this.apiEndpoint, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"x-api-key\": this.apiKey\n                },\n                body: JSON.stringify({\n                    query,\n                    variables\n                })\n            });\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            const result = await response.json();\n            if (result.errors) {\n                console.error(`GraphQL errors:`, result.errors);\n            }\n            return result;\n        } catch (error) {\n            console.error(\"GraphQL request failed:\", error);\n            throw error;\n        }\n    }\n    // Project operations\n    async getProject(id) {\n        const query = `\n      query GetProject($id: ID!) {\n        getProject(id: $id) {\n          id\n          name\n          description\n          status\n          targetCompletions\n          currentCompletions\n          surveyUrl\n          settings\n          createdAt\n          updatedAt\n        }\n      }\n    `;\n        const result = await this.makeGraphQLRequest(query, {\n            id\n        });\n        return {\n            data: result.data?.getProject || null\n        };\n    }\n    async listProjects() {\n        const query = `\n      query ListProjects {\n        listProjects {\n          items {\n            id\n            name\n            description\n            status\n            targetCompletions\n            currentCompletions\n            surveyUrl\n            settings\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    `;\n        const result = await this.makeGraphQLRequest(query);\n        return {\n            data: result.data?.listProjects?.items || []\n        };\n    }\n    // Vendor operations\n    async getVendor(id) {\n        const query = `\n      query GetVendor($id: ID!) {\n        getVendor(id: $id) {\n          id\n          name\n          contactName\n          contactEmail\n          settings\n          createdAt\n          updatedAt\n        }\n      }\n    `;\n        const result = await this.makeGraphQLRequest(query, {\n            id\n        });\n        return {\n            data: result.data?.getVendor || null\n        };\n    }\n    async listVendors(filter) {\n        const query = `\n      query ListVendors($filter: ModelVendorFilterInput) {\n        listVendors(filter: $filter) {\n          items {\n            id\n            name\n            contactName\n            contactEmail\n            settings\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    `;\n        const result = await this.makeGraphQLRequest(query, {\n            filter\n        });\n        return {\n            data: result.data?.listVendors?.items || []\n        };\n    }\n    async createVendor(input) {\n        const query = `\n      mutation CreateVendor($input: CreateVendorInput!) {\n        createVendor(input: $input) {\n          id\n          name\n          contactName\n          contactEmail\n          settings\n          createdAt\n          updatedAt\n        }\n      }\n    `;\n        const result = await this.makeGraphQLRequest(query, {\n            input\n        });\n        return {\n            data: result.data?.createVendor || null\n        };\n    }\n    async deleteVendor(input) {\n        const query = `\n      mutation DeleteVendor($input: DeleteVendorInput!) {\n        deleteVendor(input: $input) {\n          id\n          name\n          contactName\n          contactEmail\n          settings\n          createdAt\n          updatedAt\n        }\n      }\n    `;\n        const result = await this.makeGraphQLRequest(query, {\n            input\n        });\n        return {\n            data: result.data?.deleteVendor || null\n        };\n    }\n    // SurveyLink operations\n    async createSurveyLink(input) {\n        const query = `\n      mutation CreateSurveyLink($input: CreateSurveyLinkInput!) {\n        createSurveyLink(input: $input) {\n          id\n          projectId\n          uid\n          vendorId\n          status\n          metadata\n          createdAt\n          updatedAt\n          clickedAt\n          completedAt\n          ipAddress\n          userAgent\n          geoData\n        }\n      }\n    `;\n        const result = await this.makeGraphQLRequest(query, {\n            input\n        });\n        return {\n            data: result.data?.createSurveyLink || null\n        };\n    }\n    async listSurveyLinksByProject(projectId) {\n        const query = `\n      query ListSurveyLinks($filter: ModelSurveyLinkFilterInput) {\n        listSurveyLinks(filter: $filter) {\n          items {\n            id\n            projectId\n            uid\n            vendorId\n            status\n            metadata\n            createdAt\n            updatedAt\n            clickedAt\n            completedAt\n            ipAddress\n            userAgent\n            geoData\n          }\n        }\n      }\n    `;\n        const filter = {\n            projectId: {\n                eq: projectId\n            }\n        };\n        const result = await this.makeGraphQLRequest(query, {\n            filter\n        });\n        return {\n            data: result.data?.listSurveyLinks?.items || []\n        };\n    }\n    async getSurveyLinkByUid(uid) {\n        const query = `\n      query ListSurveyLinks($filter: ModelSurveyLinkFilterInput) {\n        listSurveyLinks(filter: $filter) {\n          items {\n            id\n            projectId\n            uid\n            vendorId\n            status\n            metadata\n            createdAt\n            updatedAt\n            clickedAt\n            completedAt\n            ipAddress\n            userAgent\n            geoData\n          }\n        }\n      }\n    `;\n        const filter = {\n            uid: {\n                eq: uid\n            }\n        };\n        const result = await this.makeGraphQLRequest(query, {\n            filter\n        });\n        const items = result.data?.listSurveyLinks?.items || [];\n        return {\n            data: items.length > 0 ? items[0] : null\n        };\n    }\n    async updateSurveyLink(id, input) {\n        const query = `\n      mutation UpdateSurveyLink($input: UpdateSurveyLinkInput!) {\n        updateSurveyLink(input: $input) {\n          id\n          projectId\n          uid\n          vendorId\n          status\n          metadata\n          createdAt\n          updatedAt\n          clickedAt\n          completedAt\n          ipAddress\n          userAgent\n          geoData\n        }\n      }\n    `;\n        const updateInput = {\n            id,\n            ...input\n        };\n        const result = await this.makeGraphQLRequest(query, {\n            input: updateInput\n        });\n        return {\n            data: result.data?.updateSurveyLink || null\n        };\n    }\n    // Question operations\n    async createQuestion(input) {\n        const query = `\n      mutation CreateQuestion($input: CreateQuestionInput!) {\n        createQuestion(input: $input) {\n          id\n          projectId\n          text\n          type\n          options\n          sequence\n          isRequired\n          isTrap\n          settings\n          createdAt\n          updatedAt\n        }\n      }\n    `;\n        const result = await this.makeGraphQLRequest(query, {\n            input\n        });\n        return {\n            data: result.data?.createQuestion || null\n        };\n    }\n    async listQuestionsByProject(projectId) {\n        const query = `\n      query ListQuestions($filter: ModelQuestionFilterInput) {\n        listQuestions(filter: $filter) {\n          items {\n            id\n            projectId\n            text\n            type\n            options\n            sequence\n            isRequired\n            isTrap\n            settings\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    `;\n        const filter = {\n            projectId: {\n                eq: projectId\n            }\n        };\n        const result = await this.makeGraphQLRequest(query, {\n            filter\n        });\n        return {\n            data: result.data?.listQuestions?.items || []\n        };\n    }\n    async deleteQuestion(id) {\n        const query = `\n      mutation DeleteQuestion($input: DeleteQuestionInput!) {\n        deleteQuestion(input: $input) {\n          id\n        }\n      }\n    `;\n        const result = await this.makeGraphQLRequest(query, {\n            input: {\n                id\n            }\n        });\n        return {\n            data: result.data?.deleteQuestion || null\n        };\n    }\n    // Response operations\n    async createResponse(input) {\n        const query = `\n      mutation CreateResponse($input: CreateResponseInput!) {\n        createResponse(input: $input) {\n          id\n          surveyLinkId\n          questionId\n          answer\n          metadata\n          createdAt\n          updatedAt\n        }\n      }\n    `;\n        const result = await this.makeGraphQLRequest(query, {\n            input\n        });\n        return {\n            data: result.data?.createResponse || null\n        };\n    }\n    async listResponsesBySurveyLink(surveyLinkId) {\n        const query = `\n      query ListResponses($filter: ModelResponseFilterInput) {\n        listResponses(filter: $filter) {\n          items {\n            id\n            surveyLinkId\n            questionId\n            answer\n            metadata\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    `;\n        const filter = {\n            surveyLinkId: {\n                eq: surveyLinkId\n            }\n        };\n        const result = await this.makeGraphQLRequest(query, {\n            filter\n        });\n        return {\n            data: result.data?.listResponses?.items || []\n        };\n    }\n    // ProjectVendor operations\n    async listProjectVendors(filter) {\n        const query = `\n      query ListProjectVendors($filter: ModelProjectVendorFilterInput) {\n        listProjectVendors(filter: $filter) {\n          items {\n            id\n            projectId\n            vendorId\n            quota\n            currentCount\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    `;\n        const result = await this.makeGraphQLRequest(query, {\n            filter\n        });\n        return {\n            data: result.data?.listProjectVendors?.items || []\n        };\n    }\n    async createProjectVendor(input) {\n        const query = `\n      mutation CreateProjectVendor($input: CreateProjectVendorInput!) {\n        createProjectVendor(input: $input) {\n          id\n          projectId\n          vendorId\n          quota\n          currentCount\n          createdAt\n          updatedAt\n        }\n      }\n    `;\n        const createInput = {\n            projectId: input.projectId,\n            vendorId: input.vendorId,\n            quota: input.quota || 0,\n            currentCount: input.currentCount || 0\n        };\n        const result = await this.makeGraphQLRequest(query, {\n            input: createInput\n        });\n        return {\n            data: result.data?.createProjectVendor || null\n        };\n    }\n    async updateProjectVendor(projectId, vendorId, updates) {\n        // First find the ProjectVendor record\n        const existingResult = await this.listProjectVendors({\n            and: [\n                {\n                    projectId: {\n                        eq: projectId\n                    }\n                },\n                {\n                    vendorId: {\n                        eq: vendorId\n                    }\n                }\n            ]\n        });\n        if (existingResult.data.length === 0) {\n            return {\n                data: null\n            };\n        }\n        const projectVendor = existingResult.data[0];\n        const query = `\n      mutation UpdateProjectVendor($input: UpdateProjectVendorInput!) {\n        updateProjectVendor(input: $input) {\n          id\n          projectId\n          vendorId\n          quota\n          currentCount\n          createdAt\n          updatedAt\n        }\n      }\n    `;\n        const input = {\n            id: projectVendor.id,\n            ...updates\n        };\n        const result = await this.makeGraphQLRequest(query, {\n            input\n        });\n        return {\n            data: result.data?.updateProjectVendor || null\n        };\n    }\n}\n// Create a singleton instance\nlet serverService = null;\nfunction getAmplifyServerService() {\n    if (!serverService) {\n        serverService = new AmplifyServerService();\n    }\n    return serverService;\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvbGliL2FtcGxpZnktc2VydmVyLXNlcnZpY2UudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQXNDO0FBQ1c7QUFFakQscUJBQXFCO0FBQ3JCQSxnREFBT0EsQ0FBQ0UsU0FBUyxDQUFDRCxrREFBT0E7QUFpRnpCLE1BQU1FO0lBSUpDLGFBQWM7UUFDWixJQUFJLENBQUNDLFdBQVcsR0FBR0osdURBQVksQ0FBQ00sR0FBRztRQUNuQyxJQUFJLENBQUNDLE1BQU0sR0FBR1AsdURBQVksQ0FBQ1EsT0FBTztJQUNwQztJQUVBLE1BQWNDLG1CQUFzQkMsS0FBYSxFQUFFQyxZQUFpQixDQUFDLENBQUMsRUFBK0I7UUFDbkcsSUFBSTtZQUNGLE1BQU1DLFdBQVcsTUFBTUMsTUFBTSxJQUFJLENBQUNULFdBQVcsRUFBRTtnQkFDN0NVLFFBQVE7Z0JBQ1JDLFNBQVM7b0JBQ1AsZ0JBQWdCO29CQUNoQixhQUFhLElBQUksQ0FBQ1IsTUFBTTtnQkFDMUI7Z0JBQ0FTLE1BQU1DLEtBQUtDLFNBQVMsQ0FBQztvQkFDbkJSO29CQUNBQztnQkFDRjtZQUNGO1lBRUEsSUFBSSxDQUFDQyxTQUFTTyxFQUFFLEVBQUU7Z0JBQ2hCLE1BQU0sSUFBSUMsTUFBTSxDQUFDLG9CQUFvQixFQUFFUixTQUFTUyxNQUFNLENBQUMsQ0FBQztZQUMxRDtZQUVBLE1BQU1DLFNBQVMsTUFBTVYsU0FBU1csSUFBSTtZQUVsQyxJQUFJRCxPQUFPRSxNQUFNLEVBQUU7Z0JBQ2pCQyxRQUFRQyxLQUFLLENBQUMsQ0FBQyxlQUFlLENBQUMsRUFBRUosT0FBT0UsTUFBTTtZQUNoRDtZQUVBLE9BQU9GO1FBQ1QsRUFBRSxPQUFPSSxPQUFPO1lBQ2RELFFBQVFDLEtBQUssQ0FBQywyQkFBMkJBO1lBQ3pDLE1BQU1BO1FBQ1I7SUFDRjtJQUVBLHFCQUFxQjtJQUNyQixNQUFNQyxXQUFXQyxFQUFVLEVBQXFDO1FBQzlELE1BQU1sQixRQUFRLENBQUM7Ozs7Ozs7Ozs7Ozs7OztJQWVmLENBQUM7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QUFFOUIsTUFBTWlCLE9BQU9qQixJQUFJLEVBQUV3RCx1QkFBdUI7UUFBSztJQUMxRDtBQUNGO0FBRUEsOEJBQThCO0FBQzlCLElBQUlLLGdCQUE2QztBQUUxQyxTQUFTQztJQUNkLElBQUksQ0FBQ0QsZUFBZTtRQUNsQkEsZ0JBQWdCLElBQUloRTtJQUN0QjtJQUNBLE9BQU9nRTtBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3VydmV5LWxpbmstd3JhcHBlci8uL3NyYy9saWIvYW1wbGlmeS1zZXJ2ZXItc2VydmljZS50cz9lYjk1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFtcGxpZnkgfSBmcm9tICdhd3MtYW1wbGlmeSc7XG5pbXBvcnQgb3V0cHV0cyBmcm9tICcuLi8uLi9hbXBsaWZ5X291dHB1dHMuanNvbic7XG5cbi8vIEluaXRpYWxpemUgQW1wbGlmeVxuQW1wbGlmeS5jb25maWd1cmUob3V0cHV0cyk7XG5cbi8vIFR5cGUgZGVmaW5pdGlvbnMgbWF0Y2hpbmcgdGhlIHNjaGVtYVxudHlwZSBQcm9qZWN0U3RhdHVzID0gJ0FDVElWRScgfCAnUEFVU0VEJyB8ICdDT01QTEVURUQnO1xudHlwZSBTdXJ2ZXlMaW5rU3RhdHVzID0gJ1VOVVNFRCcgfCAnQ0xJQ0tFRCcgfCAnQ09NUExFVEVEJyB8ICdESVNRVUFMSUZJRUQnIHwgJ1FVT1RBX0ZVTEwnO1xuXG5pbnRlcmZhY2UgUHJvamVjdCB7XG4gIGlkOiBzdHJpbmc7XG4gIG5hbWU6IHN0cmluZztcbiAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XG4gIHN0YXR1czogUHJvamVjdFN0YXR1cztcbiAgdGFyZ2V0Q29tcGxldGlvbnM6IG51bWJlcjtcbiAgY3VycmVudENvbXBsZXRpb25zOiBudW1iZXI7XG4gIHN1cnZleVVybDogc3RyaW5nO1xuICBzZXR0aW5ncz86IGFueTtcbiAgY3JlYXRlZEF0OiBzdHJpbmc7XG4gIHVwZGF0ZWRBdDogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgVmVuZG9yIHtcbiAgaWQ6IHN0cmluZztcbiAgbmFtZTogc3RyaW5nO1xuICBjb250YWN0TmFtZT86IHN0cmluZztcbiAgY29udGFjdEVtYWlsPzogc3RyaW5nO1xuICBzZXR0aW5ncz86IGFueTtcbiAgY3JlYXRlZEF0OiBzdHJpbmc7XG4gIHVwZGF0ZWRBdDogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgU3VydmV5TGluayB7XG4gIGlkOiBzdHJpbmc7XG4gIHByb2plY3RJZDogc3RyaW5nO1xuICB1aWQ6IHN0cmluZztcbiAgdmVuZG9ySWQ/OiBzdHJpbmc7XG4gIHN0YXR1czogU3VydmV5TGlua1N0YXR1cztcbiAgY2xpY2tlZEF0Pzogc3RyaW5nO1xuICBjb21wbGV0ZWRBdD86IHN0cmluZztcbiAgaXBBZGRyZXNzPzogc3RyaW5nO1xuICB1c2VyQWdlbnQ/OiBzdHJpbmc7XG4gIGdlb0RhdGE/OiBhbnk7XG4gIG1ldGFkYXRhPzogYW55O1xuICBjcmVhdGVkQXQ6IHN0cmluZztcbiAgdXBkYXRlZEF0OiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBRdWVzdGlvbiB7XG4gIGlkOiBzdHJpbmc7XG4gIHByb2plY3RJZDogc3RyaW5nO1xuICB0ZXh0OiBzdHJpbmc7XG4gIHR5cGU6IHN0cmluZztcbiAgb3B0aW9ucz86IGFueTtcbiAgc2VxdWVuY2U6IG51bWJlcjtcbiAgaXNSZXF1aXJlZDogYm9vbGVhbjtcbiAgY3JlYXRlZEF0OiBzdHJpbmc7XG4gIHVwZGF0ZWRBdDogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgUmVzcG9uc2Uge1xuICBpZDogc3RyaW5nO1xuICBzdXJ2ZXlMaW5rSWQ6IHN0cmluZztcbiAgcXVlc3Rpb25JZDogc3RyaW5nO1xuICBhbnN3ZXI6IHN0cmluZztcbiAgY3JlYXRlZEF0OiBzdHJpbmc7XG4gIHVwZGF0ZWRBdDogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgUHJvamVjdFZlbmRvciB7XG4gIGlkOiBzdHJpbmc7XG4gIHByb2plY3RJZDogc3RyaW5nO1xuICB2ZW5kb3JJZDogc3RyaW5nO1xuICBxdW90YTogbnVtYmVyO1xuICBjdXJyZW50Q291bnQ6IG51bWJlcjtcbiAgY3JlYXRlZEF0OiBzdHJpbmc7XG4gIHVwZGF0ZWRBdDogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgR3JhcGhRTFJlc3BvbnNlPFQ+IHtcbiAgZGF0YT86IFQ7XG4gIGVycm9ycz86IEFycmF5PHsgbWVzc2FnZTogc3RyaW5nIH0+O1xufVxuXG5jbGFzcyBBbXBsaWZ5U2VydmVyU2VydmljZSB7XG4gIHByaXZhdGUgYXBpRW5kcG9pbnQ6IHN0cmluZztcbiAgcHJpdmF0ZSBhcGlLZXk6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmFwaUVuZHBvaW50ID0gb3V0cHV0cy5kYXRhLnVybDtcbiAgICB0aGlzLmFwaUtleSA9IG91dHB1dHMuZGF0YS5hcGlfa2V5O1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBtYWtlR3JhcGhRTFJlcXVlc3Q8VD4ocXVlcnk6IHN0cmluZywgdmFyaWFibGVzOiBhbnkgPSB7fSk6IFByb21pc2U8R3JhcGhRTFJlc3BvbnNlPFQ+PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godGhpcy5hcGlFbmRwb2ludCwge1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgJ3gtYXBpLWtleSc6IHRoaXMuYXBpS2V5LFxuICAgICAgICB9LFxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgcXVlcnksXG4gICAgICAgICAgdmFyaWFibGVzLFxuICAgICAgICB9KSxcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSFRUUCBlcnJvciEgc3RhdHVzOiAke3Jlc3BvbnNlLnN0YXR1c31gKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgXG4gICAgICBpZiAocmVzdWx0LmVycm9ycykge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBHcmFwaFFMIGVycm9yczpgLCByZXN1bHQuZXJyb3JzKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignR3JhcGhRTCByZXF1ZXN0IGZhaWxlZDonLCBlcnJvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cblxuICAvLyBQcm9qZWN0IG9wZXJhdGlvbnNcbiAgYXN5bmMgZ2V0UHJvamVjdChpZDogc3RyaW5nKTogUHJvbWlzZTx7IGRhdGE6IFByb2plY3QgfCBudWxsIH0+IHtcbiAgICBjb25zdCBxdWVyeSA9IGBcbiAgICAgIHF1ZXJ5IEdldFByb2plY3QoJGlkOiBJRCEpIHtcbiAgICAgICAgZ2V0UHJvamVjdChpZDogJGlkKSB7XG4gICAgICAgICAgaWRcbiAgICAgICAgICBuYW1lXG4gICAgICAgICAgZGVzY3JpcHRpb25cbiAgICAgICAgICBzdGF0dXNcbiAgICAgICAgICB0YXJnZXRDb21wbGV0aW9uc1xuICAgICAgICAgIGN1cnJlbnRDb21wbGV0aW9uc1xuICAgICAgICAgIHN1cnZleVVybFxuICAgICAgICAgIHNldHRpbmdzXG4gICAgICAgICAgY3JlYXRlZEF0XG4gICAgICAgICAgdXBkYXRlZEF0XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBgO1xuXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5tYWtlR3JhcGhRTFJlcXVlc3Q8eyBnZXRQcm9qZWN0OiBQcm9qZWN0IH0+KHF1ZXJ5LCB7IGlkIH0pO1xuICAgIHJldHVybiB7IGRhdGE6IHJlc3VsdC5kYXRhPy5nZXRQcm9qZWN0IHx8IG51bGwgfTtcbiAgfVxuXG4gIGFzeW5jIGxpc3RQcm9qZWN0cygpOiBQcm9taXNlPHsgZGF0YTogUHJvamVjdFtdIH0+IHtcbiAgICBjb25zdCBxdWVyeSA9IGBcbiAgICAgIHF1ZXJ5IExpc3RQcm9qZWN0cyB7XG4gICAgICAgIGxpc3RQcm9qZWN0cyB7XG4gICAgICAgICAgaXRlbXMge1xuICAgICAgICAgICAgaWRcbiAgICAgICAgICAgIG5hbWVcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uXG4gICAgICAgICAgICBzdGF0dXNcbiAgICAgICAgICAgIHRhcmdldENvbXBsZXRpb25zXG4gICAgICAgICAgICBjdXJyZW50Q29tcGxldGlvbnNcbiAgICAgICAgICAgIHN1cnZleVVybFxuICAgICAgICAgICAgc2V0dGluZ3NcbiAgICAgICAgICAgIGNyZWF0ZWRBdFxuICAgICAgICAgICAgdXBkYXRlZEF0XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgYDtcblxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMubWFrZUdyYXBoUUxSZXF1ZXN0PHsgbGlzdFByb2plY3RzOiB7IGl0ZW1zOiBQcm9qZWN0W10gfSB9PihxdWVyeSk7XG4gICAgcmV0dXJuIHsgZGF0YTogcmVzdWx0LmRhdGE/Lmxpc3RQcm9qZWN0cz8uaXRlbXMgfHwgW10gfTtcbiAgfVxuXG4gIC8vIFZlbmRvciBvcGVyYXRpb25zXG4gIGFzeW5jIGdldFZlbmRvcihpZDogc3RyaW5nKTogUHJvbWlzZTx7IGRhdGE6IFZlbmRvciB8IG51bGwgfT4ge1xuICAgIGNvbnN0IHF1ZXJ5ID0gYFxuICAgICAgcXVlcnkgR2V0VmVuZG9yKCRpZDogSUQhKSB7XG4gICAgICAgIGdldFZlbmRvcihpZDogJGlkKSB7XG4gICAgICAgICAgaWRcbiAgICAgICAgICBuYW1lXG4gICAgICAgICAgY29udGFjdE5hbWVcbiAgICAgICAgICBjb250YWN0RW1haWxcbiAgICAgICAgICBzZXR0aW5nc1xuICAgICAgICAgIGNyZWF0ZWRBdFxuICAgICAgICAgIHVwZGF0ZWRBdFxuICAgICAgICB9XG4gICAgICB9XG4gICAgYDtcblxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMubWFrZUdyYXBoUUxSZXF1ZXN0PHsgZ2V0VmVuZG9yOiBWZW5kb3IgfT4ocXVlcnksIHsgaWQgfSk7XG4gICAgcmV0dXJuIHsgZGF0YTogcmVzdWx0LmRhdGE/LmdldFZlbmRvciB8fCBudWxsIH07XG4gIH1cblxuICBhc3luYyBsaXN0VmVuZG9ycyhmaWx0ZXI/OiBhbnkpOiBQcm9taXNlPHsgZGF0YTogVmVuZG9yW10gfT4ge1xuICAgIGNvbnN0IHF1ZXJ5ID0gYFxuICAgICAgcXVlcnkgTGlzdFZlbmRvcnMoJGZpbHRlcjogTW9kZWxWZW5kb3JGaWx0ZXJJbnB1dCkge1xuICAgICAgICBsaXN0VmVuZG9ycyhmaWx0ZXI6ICRmaWx0ZXIpIHtcbiAgICAgICAgICBpdGVtcyB7XG4gICAgICAgICAgICBpZFxuICAgICAgICAgICAgbmFtZVxuICAgICAgICAgICAgY29udGFjdE5hbWVcbiAgICAgICAgICAgIGNvbnRhY3RFbWFpbFxuICAgICAgICAgICAgc2V0dGluZ3NcbiAgICAgICAgICAgIGNyZWF0ZWRBdFxuICAgICAgICAgICAgdXBkYXRlZEF0XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgYDtcblxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMubWFrZUdyYXBoUUxSZXF1ZXN0PHsgbGlzdFZlbmRvcnM6IHsgaXRlbXM6IFZlbmRvcltdIH0gfT4ocXVlcnksIHsgZmlsdGVyIH0pO1xuICAgIHJldHVybiB7IGRhdGE6IHJlc3VsdC5kYXRhPy5saXN0VmVuZG9ycz8uaXRlbXMgfHwgW10gfTtcbiAgfVxuXG4gIGFzeW5jIGNyZWF0ZVZlbmRvcihpbnB1dDoge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBjb250YWN0TmFtZT86IHN0cmluZztcbiAgICBjb250YWN0RW1haWw/OiBzdHJpbmc7XG4gICAgc2V0dGluZ3M/OiBzdHJpbmc7XG4gIH0pOiBQcm9taXNlPHsgZGF0YTogVmVuZG9yIHwgbnVsbCB9PiB7XG4gICAgY29uc3QgcXVlcnkgPSBgXG4gICAgICBtdXRhdGlvbiBDcmVhdGVWZW5kb3IoJGlucHV0OiBDcmVhdGVWZW5kb3JJbnB1dCEpIHtcbiAgICAgICAgY3JlYXRlVmVuZG9yKGlucHV0OiAkaW5wdXQpIHtcbiAgICAgICAgICBpZFxuICAgICAgICAgIG5hbWVcbiAgICAgICAgICBjb250YWN0TmFtZVxuICAgICAgICAgIGNvbnRhY3RFbWFpbFxuICAgICAgICAgIHNldHRpbmdzXG4gICAgICAgICAgY3JlYXRlZEF0XG4gICAgICAgICAgdXBkYXRlZEF0XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBgO1xuXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5tYWtlR3JhcGhRTFJlcXVlc3Q8eyBjcmVhdGVWZW5kb3I6IFZlbmRvciB9PihxdWVyeSwgeyBpbnB1dCB9KTtcbiAgICByZXR1cm4geyBkYXRhOiByZXN1bHQuZGF0YT8uY3JlYXRlVmVuZG9yIHx8IG51bGwgfTtcbiAgfVxuXG4gIGFzeW5jIGRlbGV0ZVZlbmRvcihpbnB1dDogeyBpZDogc3RyaW5nIH0pOiBQcm9taXNlPHsgZGF0YTogVmVuZG9yIHwgbnVsbCB9PiB7XG4gICAgY29uc3QgcXVlcnkgPSBgXG4gICAgICBtdXRhdGlvbiBEZWxldGVWZW5kb3IoJGlucHV0OiBEZWxldGVWZW5kb3JJbnB1dCEpIHtcbiAgICAgICAgZGVsZXRlVmVuZG9yKGlucHV0OiAkaW5wdXQpIHtcbiAgICAgICAgICBpZFxuICAgICAgICAgIG5hbWVcbiAgICAgICAgICBjb250YWN0TmFtZVxuICAgICAgICAgIGNvbnRhY3RFbWFpbFxuICAgICAgICAgIHNldHRpbmdzXG4gICAgICAgICAgY3JlYXRlZEF0XG4gICAgICAgICAgdXBkYXRlZEF0XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBgO1xuXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5tYWtlR3JhcGhRTFJlcXVlc3Q8eyBkZWxldGVWZW5kb3I6IFZlbmRvciB9PihxdWVyeSwgeyBpbnB1dCB9KTtcbiAgICByZXR1cm4geyBkYXRhOiByZXN1bHQuZGF0YT8uZGVsZXRlVmVuZG9yIHx8IG51bGwgfTtcbiAgfVxuXG4gIC8vIFN1cnZleUxpbmsgb3BlcmF0aW9uc1xuICBhc3luYyBjcmVhdGVTdXJ2ZXlMaW5rKGlucHV0OiB7XG4gICAgcHJvamVjdElkOiBzdHJpbmc7XG4gICAgdWlkOiBzdHJpbmc7XG4gICAgdmVuZG9ySWQ/OiBzdHJpbmc7XG4gICAgc3RhdHVzOiBzdHJpbmc7XG4gICAgbWV0YWRhdGE/OiBzdHJpbmc7XG4gICAgZ2VvRGF0YT86IGFueTtcbiAgfSk6IFByb21pc2U8eyBkYXRhOiBTdXJ2ZXlMaW5rIHwgbnVsbCB9PiB7XG4gICAgY29uc3QgcXVlcnkgPSBgXG4gICAgICBtdXRhdGlvbiBDcmVhdGVTdXJ2ZXlMaW5rKCRpbnB1dDogQ3JlYXRlU3VydmV5TGlua0lucHV0ISkge1xuICAgICAgICBjcmVhdGVTdXJ2ZXlMaW5rKGlucHV0OiAkaW5wdXQpIHtcbiAgICAgICAgICBpZFxuICAgICAgICAgIHByb2plY3RJZFxuICAgICAgICAgIHVpZFxuICAgICAgICAgIHZlbmRvcklkXG4gICAgICAgICAgc3RhdHVzXG4gICAgICAgICAgbWV0YWRhdGFcbiAgICAgICAgICBjcmVhdGVkQXRcbiAgICAgICAgICB1cGRhdGVkQXRcbiAgICAgICAgICBjbGlja2VkQXRcbiAgICAgICAgICBjb21wbGV0ZWRBdFxuICAgICAgICAgIGlwQWRkcmVzc1xuICAgICAgICAgIHVzZXJBZ2VudFxuICAgICAgICAgIGdlb0RhdGFcbiAgICAgICAgfVxuICAgICAgfVxuICAgIGA7XG5cbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLm1ha2VHcmFwaFFMUmVxdWVzdDx7IGNyZWF0ZVN1cnZleUxpbms6IFN1cnZleUxpbmsgfT4ocXVlcnksIHsgaW5wdXQgfSk7XG4gICAgcmV0dXJuIHsgZGF0YTogcmVzdWx0LmRhdGE/LmNyZWF0ZVN1cnZleUxpbmsgfHwgbnVsbCB9O1xuICB9XG5cbiAgYXN5bmMgbGlzdFN1cnZleUxpbmtzQnlQcm9qZWN0KHByb2plY3RJZDogc3RyaW5nKTogUHJvbWlzZTx7IGRhdGE6IFN1cnZleUxpbmtbXSB9PiB7XG4gICAgY29uc3QgcXVlcnkgPSBgXG4gICAgICBxdWVyeSBMaXN0U3VydmV5TGlua3MoJGZpbHRlcjogTW9kZWxTdXJ2ZXlMaW5rRmlsdGVySW5wdXQpIHtcbiAgICAgICAgbGlzdFN1cnZleUxpbmtzKGZpbHRlcjogJGZpbHRlcikge1xuICAgICAgICAgIGl0ZW1zIHtcbiAgICAgICAgICAgIGlkXG4gICAgICAgICAgICBwcm9qZWN0SWRcbiAgICAgICAgICAgIHVpZFxuICAgICAgICAgICAgdmVuZG9ySWRcbiAgICAgICAgICAgIHN0YXR1c1xuICAgICAgICAgICAgbWV0YWRhdGFcbiAgICAgICAgICAgIGNyZWF0ZWRBdFxuICAgICAgICAgICAgdXBkYXRlZEF0XG4gICAgICAgICAgICBjbGlja2VkQXRcbiAgICAgICAgICAgIGNvbXBsZXRlZEF0XG4gICAgICAgICAgICBpcEFkZHJlc3NcbiAgICAgICAgICAgIHVzZXJBZ2VudFxuICAgICAgICAgICAgZ2VvRGF0YVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIGA7XG5cbiAgICBjb25zdCBmaWx0ZXIgPSB7XG4gICAgICBwcm9qZWN0SWQ6IHsgZXE6IHByb2plY3RJZCB9XG4gICAgfTtcblxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMubWFrZUdyYXBoUUxSZXF1ZXN0PHsgbGlzdFN1cnZleUxpbmtzOiB7IGl0ZW1zOiBTdXJ2ZXlMaW5rW10gfSB9PihxdWVyeSwgeyBmaWx0ZXIgfSk7XG4gICAgcmV0dXJuIHsgZGF0YTogcmVzdWx0LmRhdGE/Lmxpc3RTdXJ2ZXlMaW5rcz8uaXRlbXMgfHwgW10gfTtcbiAgfVxuXG4gIGFzeW5jIGdldFN1cnZleUxpbmtCeVVpZCh1aWQ6IHN0cmluZyk6IFByb21pc2U8eyBkYXRhOiBTdXJ2ZXlMaW5rIHwgbnVsbCB9PiB7XG4gICAgY29uc3QgcXVlcnkgPSBgXG4gICAgICBxdWVyeSBMaXN0U3VydmV5TGlua3MoJGZpbHRlcjogTW9kZWxTdXJ2ZXlMaW5rRmlsdGVySW5wdXQpIHtcbiAgICAgICAgbGlzdFN1cnZleUxpbmtzKGZpbHRlcjogJGZpbHRlcikge1xuICAgICAgICAgIGl0ZW1zIHtcbiAgICAgICAgICAgIGlkXG4gICAgICAgICAgICBwcm9qZWN0SWRcbiAgICAgICAgICAgIHVpZFxuICAgICAgICAgICAgdmVuZG9ySWRcbiAgICAgICAgICAgIHN0YXR1c1xuICAgICAgICAgICAgbWV0YWRhdGFcbiAgICAgICAgICAgIGNyZWF0ZWRBdFxuICAgICAgICAgICAgdXBkYXRlZEF0XG4gICAgICAgICAgICBjbGlja2VkQXRcbiAgICAgICAgICAgIGNvbXBsZXRlZEF0XG4gICAgICAgICAgICBpcEFkZHJlc3NcbiAgICAgICAgICAgIHVzZXJBZ2VudFxuICAgICAgICAgICAgZ2VvRGF0YVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIGA7XG5cbiAgICBjb25zdCBmaWx0ZXIgPSB7XG4gICAgICB1aWQ6IHsgZXE6IHVpZCB9XG4gICAgfTtcblxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMubWFrZUdyYXBoUUxSZXF1ZXN0PHsgbGlzdFN1cnZleUxpbmtzOiB7IGl0ZW1zOiBTdXJ2ZXlMaW5rW10gfSB9PihxdWVyeSwgeyBmaWx0ZXIgfSk7XG4gICAgY29uc3QgaXRlbXMgPSByZXN1bHQuZGF0YT8ubGlzdFN1cnZleUxpbmtzPy5pdGVtcyB8fCBbXTtcbiAgICByZXR1cm4geyBkYXRhOiBpdGVtcy5sZW5ndGggPiAwID8gaXRlbXNbMF0gOiBudWxsIH07XG4gIH1cblxuICBhc3luYyB1cGRhdGVTdXJ2ZXlMaW5rKGlkOiBzdHJpbmcsIGlucHV0OiB7XG4gICAgc3RhdHVzPzogc3RyaW5nO1xuICAgIGNsaWNrZWRBdD86IHN0cmluZztcbiAgICBjb21wbGV0ZWRBdD86IHN0cmluZztcbiAgICBpcEFkZHJlc3M/OiBzdHJpbmc7XG4gICAgdXNlckFnZW50Pzogc3RyaW5nO1xuICAgIGdlb0RhdGE/OiBhbnk7XG4gICAgbWV0YWRhdGE/OiBzdHJpbmc7XG4gIH0pOiBQcm9taXNlPHsgZGF0YTogU3VydmV5TGluayB8IG51bGwgfT4ge1xuICAgIGNvbnN0IHF1ZXJ5ID0gYFxuICAgICAgbXV0YXRpb24gVXBkYXRlU3VydmV5TGluaygkaW5wdXQ6IFVwZGF0ZVN1cnZleUxpbmtJbnB1dCEpIHtcbiAgICAgICAgdXBkYXRlU3VydmV5TGluayhpbnB1dDogJGlucHV0KSB7XG4gICAgICAgICAgaWRcbiAgICAgICAgICBwcm9qZWN0SWRcbiAgICAgICAgICB1aWRcbiAgICAgICAgICB2ZW5kb3JJZFxuICAgICAgICAgIHN0YXR1c1xuICAgICAgICAgIG1ldGFkYXRhXG4gICAgICAgICAgY3JlYXRlZEF0XG4gICAgICAgICAgdXBkYXRlZEF0XG4gICAgICAgICAgY2xpY2tlZEF0XG4gICAgICAgICAgY29tcGxldGVkQXRcbiAgICAgICAgICBpcEFkZHJlc3NcbiAgICAgICAgICB1c2VyQWdlbnRcbiAgICAgICAgICBnZW9EYXRhXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBgO1xuXG4gICAgY29uc3QgdXBkYXRlSW5wdXQgPSB7IGlkLCAuLi5pbnB1dCB9O1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMubWFrZUdyYXBoUUxSZXF1ZXN0PHsgdXBkYXRlU3VydmV5TGluazogU3VydmV5TGluayB9PihxdWVyeSwgeyBpbnB1dDogdXBkYXRlSW5wdXQgfSk7XG4gICAgcmV0dXJuIHsgZGF0YTogcmVzdWx0LmRhdGE/LnVwZGF0ZVN1cnZleUxpbmsgfHwgbnVsbCB9O1xuICB9XG5cbiAgLy8gUXVlc3Rpb24gb3BlcmF0aW9uc1xuICBhc3luYyBjcmVhdGVRdWVzdGlvbihpbnB1dDoge1xuICAgIHByb2plY3RJZDogc3RyaW5nO1xuICAgIHRleHQ6IHN0cmluZztcbiAgICB0eXBlOiBzdHJpbmc7XG4gICAgb3B0aW9ucz86IGFueTtcbiAgICBzZXF1ZW5jZTogbnVtYmVyO1xuICAgIGlzUmVxdWlyZWQ/OiBib29sZWFuO1xuICAgIGlzVHJhcD86IGJvb2xlYW47XG4gICAgc2V0dGluZ3M/OiBhbnk7XG4gIH0pOiBQcm9taXNlPHsgZGF0YTogYW55IHwgbnVsbCB9PiB7XG4gICAgY29uc3QgcXVlcnkgPSBgXG4gICAgICBtdXRhdGlvbiBDcmVhdGVRdWVzdGlvbigkaW5wdXQ6IENyZWF0ZVF1ZXN0aW9uSW5wdXQhKSB7XG4gICAgICAgIGNyZWF0ZVF1ZXN0aW9uKGlucHV0OiAkaW5wdXQpIHtcbiAgICAgICAgICBpZFxuICAgICAgICAgIHByb2plY3RJZFxuICAgICAgICAgIHRleHRcbiAgICAgICAgICB0eXBlXG4gICAgICAgICAgb3B0aW9uc1xuICAgICAgICAgIHNlcXVlbmNlXG4gICAgICAgICAgaXNSZXF1aXJlZFxuICAgICAgICAgIGlzVHJhcFxuICAgICAgICAgIHNldHRpbmdzXG4gICAgICAgICAgY3JlYXRlZEF0XG4gICAgICAgICAgdXBkYXRlZEF0XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBgO1xuXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5tYWtlR3JhcGhRTFJlcXVlc3Q8eyBjcmVhdGVRdWVzdGlvbjogYW55IH0+KHF1ZXJ5LCB7IGlucHV0IH0pO1xuICAgIHJldHVybiB7IGRhdGE6IHJlc3VsdC5kYXRhPy5jcmVhdGVRdWVzdGlvbiB8fCBudWxsIH07XG4gIH1cblxuICBhc3luYyBsaXN0UXVlc3Rpb25zQnlQcm9qZWN0KHByb2plY3RJZDogc3RyaW5nKTogUHJvbWlzZTx7IGRhdGE6IGFueVtdIH0+IHtcbiAgICBjb25zdCBxdWVyeSA9IGBcbiAgICAgIHF1ZXJ5IExpc3RRdWVzdGlvbnMoJGZpbHRlcjogTW9kZWxRdWVzdGlvbkZpbHRlcklucHV0KSB7XG4gICAgICAgIGxpc3RRdWVzdGlvbnMoZmlsdGVyOiAkZmlsdGVyKSB7XG4gICAgICAgICAgaXRlbXMge1xuICAgICAgICAgICAgaWRcbiAgICAgICAgICAgIHByb2plY3RJZFxuICAgICAgICAgICAgdGV4dFxuICAgICAgICAgICAgdHlwZVxuICAgICAgICAgICAgb3B0aW9uc1xuICAgICAgICAgICAgc2VxdWVuY2VcbiAgICAgICAgICAgIGlzUmVxdWlyZWRcbiAgICAgICAgICAgIGlzVHJhcFxuICAgICAgICAgICAgc2V0dGluZ3NcbiAgICAgICAgICAgIGNyZWF0ZWRBdFxuICAgICAgICAgICAgdXBkYXRlZEF0XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgYDtcblxuICAgIGNvbnN0IGZpbHRlciA9IHtcbiAgICAgIHByb2plY3RJZDogeyBlcTogcHJvamVjdElkIH1cbiAgICB9O1xuXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5tYWtlR3JhcGhRTFJlcXVlc3Q8eyBsaXN0UXVlc3Rpb25zOiB7IGl0ZW1zOiBhbnlbXSB9IH0+KHF1ZXJ5LCB7IGZpbHRlciB9KTtcbiAgICByZXR1cm4geyBkYXRhOiByZXN1bHQuZGF0YT8ubGlzdFF1ZXN0aW9ucz8uaXRlbXMgfHwgW10gfTtcbiAgfVxuXG4gIGFzeW5jIGRlbGV0ZVF1ZXN0aW9uKGlkOiBzdHJpbmcpOiBQcm9taXNlPHsgZGF0YTogYW55IHwgbnVsbCB9PiB7XG4gICAgY29uc3QgcXVlcnkgPSBgXG4gICAgICBtdXRhdGlvbiBEZWxldGVRdWVzdGlvbigkaW5wdXQ6IERlbGV0ZVF1ZXN0aW9uSW5wdXQhKSB7XG4gICAgICAgIGRlbGV0ZVF1ZXN0aW9uKGlucHV0OiAkaW5wdXQpIHtcbiAgICAgICAgICBpZFxuICAgICAgICB9XG4gICAgICB9XG4gICAgYDtcblxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMubWFrZUdyYXBoUUxSZXF1ZXN0PHsgZGVsZXRlUXVlc3Rpb246IGFueSB9PihxdWVyeSwgeyBpbnB1dDogeyBpZCB9IH0pO1xuICAgIHJldHVybiB7IGRhdGE6IHJlc3VsdC5kYXRhPy5kZWxldGVRdWVzdGlvbiB8fCBudWxsIH07XG4gIH1cblxuICAvLyBSZXNwb25zZSBvcGVyYXRpb25zXG4gIGFzeW5jIGNyZWF0ZVJlc3BvbnNlKGlucHV0OiB7XG4gICAgc3VydmV5TGlua0lkOiBzdHJpbmc7XG4gICAgcXVlc3Rpb25JZDogc3RyaW5nO1xuICAgIGFuc3dlcjogc3RyaW5nO1xuICAgIG1ldGFkYXRhPzogYW55O1xuICB9KTogUHJvbWlzZTx7IGRhdGE6IGFueSB8IG51bGwgfT4ge1xuICAgIGNvbnN0IHF1ZXJ5ID0gYFxuICAgICAgbXV0YXRpb24gQ3JlYXRlUmVzcG9uc2UoJGlucHV0OiBDcmVhdGVSZXNwb25zZUlucHV0ISkge1xuICAgICAgICBjcmVhdGVSZXNwb25zZShpbnB1dDogJGlucHV0KSB7XG4gICAgICAgICAgaWRcbiAgICAgICAgICBzdXJ2ZXlMaW5rSWRcbiAgICAgICAgICBxdWVzdGlvbklkXG4gICAgICAgICAgYW5zd2VyXG4gICAgICAgICAgbWV0YWRhdGFcbiAgICAgICAgICBjcmVhdGVkQXRcbiAgICAgICAgICB1cGRhdGVkQXRcbiAgICAgICAgfVxuICAgICAgfVxuICAgIGA7XG5cbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLm1ha2VHcmFwaFFMUmVxdWVzdDx7IGNyZWF0ZVJlc3BvbnNlOiBhbnkgfT4ocXVlcnksIHsgaW5wdXQgfSk7XG4gICAgcmV0dXJuIHsgZGF0YTogcmVzdWx0LmRhdGE/LmNyZWF0ZVJlc3BvbnNlIHx8IG51bGwgfTtcbiAgfVxuXG4gIGFzeW5jIGxpc3RSZXNwb25zZXNCeVN1cnZleUxpbmsoc3VydmV5TGlua0lkOiBzdHJpbmcpOiBQcm9taXNlPHsgZGF0YTogYW55W10gfT4ge1xuICAgIGNvbnN0IHF1ZXJ5ID0gYFxuICAgICAgcXVlcnkgTGlzdFJlc3BvbnNlcygkZmlsdGVyOiBNb2RlbFJlc3BvbnNlRmlsdGVySW5wdXQpIHtcbiAgICAgICAgbGlzdFJlc3BvbnNlcyhmaWx0ZXI6ICRmaWx0ZXIpIHtcbiAgICAgICAgICBpdGVtcyB7XG4gICAgICAgICAgICBpZFxuICAgICAgICAgICAgc3VydmV5TGlua0lkXG4gICAgICAgICAgICBxdWVzdGlvbklkXG4gICAgICAgICAgICBhbnN3ZXJcbiAgICAgICAgICAgIG1ldGFkYXRhXG4gICAgICAgICAgICBjcmVhdGVkQXRcbiAgICAgICAgICAgIHVwZGF0ZWRBdFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIGA7XG5cbiAgICBjb25zdCBmaWx0ZXIgPSB7XG4gICAgICBzdXJ2ZXlMaW5rSWQ6IHsgZXE6IHN1cnZleUxpbmtJZCB9XG4gICAgfTtcblxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMubWFrZUdyYXBoUUxSZXF1ZXN0PHsgbGlzdFJlc3BvbnNlczogeyBpdGVtczogYW55W10gfSB9PihxdWVyeSwgeyBmaWx0ZXIgfSk7XG4gICAgcmV0dXJuIHsgZGF0YTogcmVzdWx0LmRhdGE/Lmxpc3RSZXNwb25zZXM/Lml0ZW1zIHx8IFtdIH07XG4gIH1cblxuICAvLyBQcm9qZWN0VmVuZG9yIG9wZXJhdGlvbnNcbiAgYXN5bmMgbGlzdFByb2plY3RWZW5kb3JzKGZpbHRlcj86IGFueSk6IFByb21pc2U8eyBkYXRhOiBhbnlbXSB9PiB7XG4gICAgY29uc3QgcXVlcnkgPSBgXG4gICAgICBxdWVyeSBMaXN0UHJvamVjdFZlbmRvcnMoJGZpbHRlcjogTW9kZWxQcm9qZWN0VmVuZG9yRmlsdGVySW5wdXQpIHtcbiAgICAgICAgbGlzdFByb2plY3RWZW5kb3JzKGZpbHRlcjogJGZpbHRlcikge1xuICAgICAgICAgIGl0ZW1zIHtcbiAgICAgICAgICAgIGlkXG4gICAgICAgICAgICBwcm9qZWN0SWRcbiAgICAgICAgICAgIHZlbmRvcklkXG4gICAgICAgICAgICBxdW90YVxuICAgICAgICAgICAgY3VycmVudENvdW50XG4gICAgICAgICAgICBjcmVhdGVkQXRcbiAgICAgICAgICAgIHVwZGF0ZWRBdFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIGA7XG5cbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLm1ha2VHcmFwaFFMUmVxdWVzdDx7IGxpc3RQcm9qZWN0VmVuZG9yczogeyBpdGVtczogYW55W10gfSB9PihxdWVyeSwgeyBmaWx0ZXIgfSk7XG4gICAgcmV0dXJuIHsgZGF0YTogcmVzdWx0LmRhdGE/Lmxpc3RQcm9qZWN0VmVuZG9ycz8uaXRlbXMgfHwgW10gfTtcbiAgfVxuXG4gIGFzeW5jIGNyZWF0ZVByb2plY3RWZW5kb3IoaW5wdXQ6IHtcbiAgICBwcm9qZWN0SWQ6IHN0cmluZztcbiAgICB2ZW5kb3JJZDogc3RyaW5nO1xuICAgIHF1b3RhPzogbnVtYmVyO1xuICAgIGN1cnJlbnRDb3VudD86IG51bWJlcjtcbiAgfSk6IFByb21pc2U8eyBkYXRhOiBhbnkgfCBudWxsIH0+IHtcbiAgICBjb25zdCBxdWVyeSA9IGBcbiAgICAgIG11dGF0aW9uIENyZWF0ZVByb2plY3RWZW5kb3IoJGlucHV0OiBDcmVhdGVQcm9qZWN0VmVuZG9ySW5wdXQhKSB7XG4gICAgICAgIGNyZWF0ZVByb2plY3RWZW5kb3IoaW5wdXQ6ICRpbnB1dCkge1xuICAgICAgICAgIGlkXG4gICAgICAgICAgcHJvamVjdElkXG4gICAgICAgICAgdmVuZG9ySWRcbiAgICAgICAgICBxdW90YVxuICAgICAgICAgIGN1cnJlbnRDb3VudFxuICAgICAgICAgIGNyZWF0ZWRBdFxuICAgICAgICAgIHVwZGF0ZWRBdFxuICAgICAgICB9XG4gICAgICB9XG4gICAgYDtcblxuICAgIGNvbnN0IGNyZWF0ZUlucHV0ID0ge1xuICAgICAgcHJvamVjdElkOiBpbnB1dC5wcm9qZWN0SWQsXG4gICAgICB2ZW5kb3JJZDogaW5wdXQudmVuZG9ySWQsXG4gICAgICBxdW90YTogaW5wdXQucXVvdGEgfHwgMCxcbiAgICAgIGN1cnJlbnRDb3VudDogaW5wdXQuY3VycmVudENvdW50IHx8IDBcbiAgICB9O1xuXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5tYWtlR3JhcGhRTFJlcXVlc3Q8eyBjcmVhdGVQcm9qZWN0VmVuZG9yOiBhbnkgfT4ocXVlcnksIHsgaW5wdXQ6IGNyZWF0ZUlucHV0IH0pO1xuICAgIHJldHVybiB7IGRhdGE6IHJlc3VsdC5kYXRhPy5jcmVhdGVQcm9qZWN0VmVuZG9yIHx8IG51bGwgfTtcbiAgfVxuXG4gIGFzeW5jIHVwZGF0ZVByb2plY3RWZW5kb3IocHJvamVjdElkOiBzdHJpbmcsIHZlbmRvcklkOiBzdHJpbmcsIHVwZGF0ZXM6IHtcbiAgICBjdXJyZW50Q291bnQ/OiBudW1iZXI7XG4gICAgcXVvdGE/OiBudW1iZXI7XG4gIH0pOiBQcm9taXNlPHsgZGF0YTogYW55IHwgbnVsbCB9PiB7XG4gICAgLy8gRmlyc3QgZmluZCB0aGUgUHJvamVjdFZlbmRvciByZWNvcmRcbiAgICBjb25zdCBleGlzdGluZ1Jlc3VsdCA9IGF3YWl0IHRoaXMubGlzdFByb2plY3RWZW5kb3JzKHtcbiAgICAgIGFuZDogW1xuICAgICAgICB7IHByb2plY3RJZDogeyBlcTogcHJvamVjdElkIH0gfSxcbiAgICAgICAgeyB2ZW5kb3JJZDogeyBlcTogdmVuZG9ySWQgfSB9XG4gICAgICBdXG4gICAgfSk7XG5cbiAgICBpZiAoZXhpc3RpbmdSZXN1bHQuZGF0YS5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB7IGRhdGE6IG51bGwgfTtcbiAgICB9XG5cbiAgICBjb25zdCBwcm9qZWN0VmVuZG9yID0gZXhpc3RpbmdSZXN1bHQuZGF0YVswXTtcblxuICAgIGNvbnN0IHF1ZXJ5ID0gYFxuICAgICAgbXV0YXRpb24gVXBkYXRlUHJvamVjdFZlbmRvcigkaW5wdXQ6IFVwZGF0ZVByb2plY3RWZW5kb3JJbnB1dCEpIHtcbiAgICAgICAgdXBkYXRlUHJvamVjdFZlbmRvcihpbnB1dDogJGlucHV0KSB7XG4gICAgICAgICAgaWRcbiAgICAgICAgICBwcm9qZWN0SWRcbiAgICAgICAgICB2ZW5kb3JJZFxuICAgICAgICAgIHF1b3RhXG4gICAgICAgICAgY3VycmVudENvdW50XG4gICAgICAgICAgY3JlYXRlZEF0XG4gICAgICAgICAgdXBkYXRlZEF0XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBgO1xuXG4gICAgY29uc3QgaW5wdXQgPSB7XG4gICAgICBpZDogcHJvamVjdFZlbmRvci5pZCxcbiAgICAgIC4uLnVwZGF0ZXNcbiAgICB9O1xuXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5tYWtlR3JhcGhRTFJlcXVlc3Q8eyB1cGRhdGVQcm9qZWN0VmVuZG9yOiBhbnkgfT4ocXVlcnksIHsgaW5wdXQgfSk7XG4gICAgcmV0dXJuIHsgZGF0YTogcmVzdWx0LmRhdGE/LnVwZGF0ZVByb2plY3RWZW5kb3IgfHwgbnVsbCB9O1xuICB9XG59XG5cbi8vIENyZWF0ZSBhIHNpbmdsZXRvbiBpbnN0YW5jZVxubGV0IHNlcnZlclNlcnZpY2U6IEFtcGxpZnlTZXJ2ZXJTZXJ2aWNlIHwgbnVsbCA9IG51bGw7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRBbXBsaWZ5U2VydmVyU2VydmljZSgpOiBBbXBsaWZ5U2VydmVyU2VydmljZSB7XG4gIGlmICghc2VydmVyU2VydmljZSkge1xuICAgIHNlcnZlclNlcnZpY2UgPSBuZXcgQW1wbGlmeVNlcnZlclNlcnZpY2UoKTtcbiAgfVxuICByZXR1cm4gc2VydmVyU2VydmljZTtcbn1cbiJdLCJuYW1lcyI6WyJBbXBsaWZ5Iiwib3V0cHV0cyIsImNvbmZpZ3VyZSIsIkFtcGxpZnlTZXJ2ZXJTZXJ2aWNlIiwiY29uc3RydWN0b3IiLCJhcGlFbmRwb2ludCIsImRhdGEiLCJ1cmwiLCJhcGlLZXkiLCJhcGlfa2V5IiwibWFrZUdyYXBoUUxSZXF1ZXN0IiwicXVlcnkiLCJ2YXJpYWJsZXMiLCJyZXNwb25zZSIsImZldGNoIiwibWV0aG9kIiwiaGVhZGVycyIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5Iiwib2siLCJFcnJvciIsInN0YXR1cyIsInJlc3VsdCIsImpzb24iLCJlcnJvcnMiLCJjb25zb2xlIiwiZXJyb3IiLCJnZXRQcm9qZWN0IiwiaWQiLCJsaXN0UHJvamVjdHMiLCJpdGVtcyIsImdldFZlbmRvciIsImxpc3RWZW5kb3JzIiwiZmlsdGVyIiwiY3JlYXRlVmVuZG9yIiwiaW5wdXQiLCJkZWxldGVWZW5kb3IiLCJjcmVhdGVTdXJ2ZXlMaW5rIiwibGlzdFN1cnZleUxpbmtzQnlQcm9qZWN0IiwicHJvamVjdElkIiwiZXEiLCJsaXN0U3VydmV5TGlua3MiLCJnZXRTdXJ2ZXlMaW5rQnlVaWQiLCJ1aWQiLCJsZW5ndGgiLCJ1cGRhdGVTdXJ2ZXlMaW5rIiwidXBkYXRlSW5wdXQiLCJjcmVhdGVRdWVzdGlvbiIsImxpc3RRdWVzdGlvbnNCeVByb2plY3QiLCJsaXN0UXVlc3Rpb25zIiwiZGVsZXRlUXVlc3Rpb24iLCJjcmVhdGVSZXNwb25zZSIsImxpc3RSZXNwb25zZXNCeVN1cnZleUxpbmsiLCJzdXJ2ZXlMaW5rSWQiLCJsaXN0UmVzcG9uc2VzIiwibGlzdFByb2plY3RWZW5kb3JzIiwiY3JlYXRlUHJvamVjdFZlbmRvciIsImNyZWF0ZUlucHV0IiwidmVuZG9ySWQiLCJxdW90YSIsImN1cnJlbnRDb3VudCIsInVwZGF0ZVByb2plY3RWZW5kb3IiLCJ1cGRhdGVzIiwiZXhpc3RpbmdSZXN1bHQiLCJhbmQiLCJwcm9qZWN0VmVuZG9yIiwic2VydmVyU2VydmljZSIsImdldEFtcGxpZnlTZXJ2ZXJTZXJ2aWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./src/lib/amplify-server-service.ts\n");

/***/ }),

/***/ "(api)/./src/lib/security-service.ts":
/*!*************************************!*\
  !*** ./src/lib/security-service.ts ***!
  \*************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   securityService: () => (/* binding */ securityService)\n/* harmony export */ });\n/* harmony import */ var aws_amplify_auth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! aws-amplify/auth */ \"aws-amplify/auth\");\n/* harmony import */ var _amplify_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./amplify-data-service */ \"(api)/./src/lib/amplify-data-service.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([aws_amplify_auth__WEBPACK_IMPORTED_MODULE_0__, _amplify_data_service__WEBPACK_IMPORTED_MODULE_1__]);\n([aws_amplify_auth__WEBPACK_IMPORTED_MODULE_0__, _amplify_data_service__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n// Domain configuration\nconst MAIN_DOMAIN = \"protegeresearchsurvey.com\" || 0;\nconst SHORT_URL_BASE = \"https://protegeresearchsurvey.com/s\" || 0;\n// Create stubs for the missing functions that will be implemented later\nconst getVpnStatus = async (ip)=>{\n    // TODO: Implement VPN detection\n    console.log(\"Checking VPN status for IP:\", ip);\n    return {\n        isVpn: false\n    };\n};\nconst getCaptchaVerification = async (token, ip)=>{\n    // TODO: Implement CAPTCHA verification\n    console.log(\"Verifying CAPTCHA token:\", token, \"IP:\", ip);\n    return {\n        score: 0.9\n    };\n};\nconst getGeoLocation = async (ip)=>{\n    // TODO: Implement geo-location lookup\n    console.log(\"Getting geo-location for IP:\", ip);\n    return {\n        country: \"US\",\n        city: \"Unknown\",\n        ip\n    };\n};\n/**\n * Security Service - Handles security features for MCP server integration\n * Centralizes authentication, geo-restriction, VPN detection, and captcha verification\n */ const securityService = {\n    /**\n   * Get current security context including authentication status, geo info, VPN detection\n   */ getSecurityContext: async (ip, captchaToken)=>{\n        // Initialize security context\n        const securityContext = {\n            authenticated: false,\n            detectedVpn: false\n        };\n        try {\n            // Check authentication status using Amplify v6 APIs\n            try {\n                const currentUser = await (0,aws_amplify_auth__WEBPACK_IMPORTED_MODULE_0__.getCurrentUser)();\n                const session = await (0,aws_amplify_auth__WEBPACK_IMPORTED_MODULE_0__.fetchAuthSession)();\n                securityContext.authenticated = true;\n                securityContext.userId = currentUser.userId;\n                // Extract user groups from Cognito tokens using new API structure\n                const accessToken = session.tokens?.accessToken;\n                const payload = accessToken?.payload;\n                securityContext.userGroups = payload?.[\"cognito:groups\"] || [];\n            } catch (error) {\n                // User is not authenticated\n                securityContext.authenticated = false;\n            }\n            // Get geo-location information\n            const geoInfo = await getGeoLocation(ip);\n            if (geoInfo) {\n                securityContext.geoLocation = {\n                    country: geoInfo.country,\n                    city: geoInfo.city,\n                    ip: geoInfo.ip\n                };\n            }\n            // Check VPN status\n            const vpnStatus = await getVpnStatus(ip);\n            securityContext.detectedVpn = vpnStatus.isVpn;\n            // Verify captcha if token provided\n            if (captchaToken) {\n                const captchaResult = await getCaptchaVerification(captchaToken, ip);\n                securityContext.captchaScore = captchaResult.score;\n            }\n            return securityContext;\n        } catch (error) {\n            console.error(\"Error getting security context:\", error);\n            return securityContext;\n        }\n    },\n    /**\n   * Verify access to a survey link based on geo-restrictions and other security rules\n   */ verifySurveyLinkAccess: async (surveyLinkUid, ip, captchaToken)=>{\n        try {\n            const securityContext = await securityService.getSecurityContext(ip, captchaToken);\n            // Get survey link with proper null check\n            if (!surveyLinkUid) {\n                return {\n                    allowed: false,\n                    reason: \"INVALID_LINK_ID\",\n                    securityContext\n                };\n            }\n            const amplifyDataService = await (0,_amplify_data_service__WEBPACK_IMPORTED_MODULE_1__.getAmplifyDataService)();\n            const surveyLink = await amplifyDataService.surveyLinks.getByUid(surveyLinkUid);\n            if (!surveyLink) {\n                return {\n                    allowed: false,\n                    reason: \"LINK_NOT_FOUND\",\n                    securityContext\n                };\n            }\n            // Check if link is already completed or flagged\n            if (surveyLink.data && surveyLink.data.status && [\n                \"COMPLETED\",\n                \"FLAGGED\"\n            ].includes(surveyLink.data.status)) {\n                return {\n                    allowed: false,\n                    reason: \"LINK_ALREADY_USED\",\n                    securityContext\n                };\n            } // Check geo-restrictions if set in project settings\n            if (surveyLink.data && surveyLink.data.projectId && securityContext.geoLocation) {\n                try {\n                    const project = await amplifyDataService.projects.get(surveyLink.data.projectId);\n                    // Get geo-restrictions from project settings if available\n                    const settings = project.data?.settings;\n                    const geoRestriction = settings?.geoRestriction;\n                    if (geoRestriction) {\n                        const allowedCountries = typeof geoRestriction === \"string\" ? JSON.parse(geoRestriction) : geoRestriction;\n                        if (Array.isArray(allowedCountries) && allowedCountries.length > 0 && !allowedCountries.includes(securityContext.geoLocation.country)) {\n                            return {\n                                allowed: false,\n                                reason: \"GEO_RESTRICTED\",\n                                securityContext\n                            };\n                        }\n                    }\n                } catch (e) {\n                    console.error(\"Error parsing geo restrictions:\", e);\n                }\n            }\n            // Check VPN usage if detected (linkType field no longer exists in model)\n            if (securityContext.detectedVpn && surveyLink.data) {\n                return {\n                    allowed: false,\n                    reason: \"VPN_DETECTED\",\n                    securityContext\n                };\n            }\n            // Check captcha score if provided\n            if (captchaToken && securityContext.captchaScore !== undefined && securityContext.captchaScore < 0.5) {\n                return {\n                    allowed: false,\n                    reason: \"CAPTCHA_FAILED\",\n                    securityContext\n                };\n            }\n            return {\n                allowed: true,\n                securityContext\n            };\n        } catch (error) {\n            console.error(\"Error verifying survey link access:\", error);\n            return {\n                allowed: false,\n                reason: \"INTERNAL_ERROR\",\n                securityContext: {\n                    authenticated: false,\n                    detectedVpn: false\n                }\n            };\n        }\n    },\n    /**\n   * Generate survey links using the custom domain\n   */ generateSurveyLink: (projectId, uid, type = \"short\")=>{\n        if (type === \"short\") {\n            return `${SHORT_URL_BASE}/${projectId}/${uid}`;\n        } else {\n            return `https://${MAIN_DOMAIN}/survey/${projectId}/${uid}`;\n        }\n    },\n    /**\n   * Generate completion page link using the custom domain\n   */ generateCompletionLink: (projectId, uid)=>{\n        return `https://${MAIN_DOMAIN}/completion/${projectId}/${uid}`;\n    },\n    /**\n   * Log security events to help with auditing and threat detection\n   */ logSecurityEvent: async (eventType, details)=>{\n        console.log(`[SECURITY_EVENT] ${eventType}:`, details);\n    // In a production environment, this would send events to a logging service\n    }\n};\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/lib/security-service.ts\n");

/***/ }),

/***/ "(api)/./src/pages/api/links/generate.ts":
/*!*****************************************!*\
  !*** ./src/pages/api/links/generate.ts ***!
  \*****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var nanoid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! nanoid */ \"nanoid\");\n/* harmony import */ var _lib_amplify_server_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/amplify-server-service */ \"(api)/./src/lib/amplify-server-service.ts\");\n/* harmony import */ var _lib_security_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/security-service */ \"(api)/./src/lib/security-service.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([nanoid__WEBPACK_IMPORTED_MODULE_0__, _lib_amplify_server_service__WEBPACK_IMPORTED_MODULE_1__, _lib_security_service__WEBPACK_IMPORTED_MODULE_2__]);\n([nanoid__WEBPACK_IMPORTED_MODULE_0__, _lib_amplify_server_service__WEBPACK_IMPORTED_MODULE_1__, _lib_security_service__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n// Domain configuration\nconst PRODUCTION_DOMAIN = \"protegeresearchsurvey.com\" || 0;\nconst DEVELOPMENT_DOMAIN = \"localhost:3000\";\nconst getDomain = (useDevelopment)=>{\n    return useDevelopment ? DEVELOPMENT_DOMAIN : PRODUCTION_DOMAIN;\n};\nconst getShortUrl = (useDevelopment)=>{\n    const domain = getDomain(useDevelopment);\n    const protocol = useDevelopment ? \"http\" : \"https\";\n    return `${protocol}://${domain}/s`;\n};\nasync function handler(req, res) {\n    if (req.method !== \"POST\") {\n        return res.status(405).json({\n            success: false,\n            message: \"Method not allowed\"\n        });\n    }\n    try {\n        const amplifyServerService = (0,_lib_amplify_server_service__WEBPACK_IMPORTED_MODULE_1__.getAmplifyServerService)();\n        const { projectId, originalUrl, count, vendorId, linkType, geoRestriction, testCount, liveCount, useDevelopmentDomain } = req.body;\n        // Get client IP for security logging\n        const ip = req.headers[\"x-forwarded-for\"]?.toString() || req.socket.remoteAddress || \"unknown\";\n        // Log security event\n        await _lib_security_service__WEBPACK_IMPORTED_MODULE_2__.securityService.logSecurityEvent(\"LINK_GENERATION_ATTEMPT\", {\n            projectId,\n            vendorId,\n            ip,\n            count: count || (testCount && liveCount ? testCount + liveCount : 0)\n        });\n        if (!projectId || !originalUrl) {\n            return res.status(400).json({\n                success: false,\n                message: \"Missing required parameters\"\n            });\n        }\n        // Validate count logic\n        let totalCount = count;\n        if (testCount !== undefined && liveCount !== undefined) {\n            // If both test and live counts are provided, use those instead\n            totalCount = testCount + liveCount;\n            if (totalCount < 1 || totalCount > 1000) {\n                return res.status(400).json({\n                    success: false,\n                    message: \"Total count must be between 1 and 1000\"\n                });\n            }\n        } else {\n            // Otherwise use the total count value\n            if (!count || count < 1 || count > 1000) {\n                return res.status(400).json({\n                    success: false,\n                    message: \"Count must be between 1 and 1000\"\n                });\n            }\n        }\n        // Validate project exists\n        const projectResult = await amplifyServerService.getProject(projectId);\n        // Fix: Extract project correctly by accessing .data property\n        const project = projectResult.data;\n        if (!project) {\n            return res.status(404).json({\n                success: false,\n                message: \"Project not found\"\n            });\n        }\n        // Validate vendor if provided\n        if (vendorId) {\n            const vendorResult = await amplifyServerService.getVendor(vendorId);\n            const vendor = vendorResult?.data;\n            if (!vendor) {\n                return res.status(404).json({\n                    success: false,\n                    message: \"Vendor not found\"\n                });\n            }\n            // Check if vendor belongs to this project by checking the ProjectVendor relationship\n            const projectVendorResult = await amplifyServerService.listProjectVendors({\n                and: [\n                    {\n                        projectId: {\n                            eq: projectId\n                        }\n                    },\n                    {\n                        vendorId: {\n                            eq: vendorId\n                        }\n                    }\n                ]\n            });\n            if (!projectVendorResult.data || projectVendorResult.data.length === 0) {\n                return res.status(400).json({\n                    success: false,\n                    message: \"Vendor does not belong to this project\"\n                });\n            }\n        }\n        // Generate links\n        const links = [];\n        const creationPromises = [];\n        // Get vendor code for UID generation if vendor is specified\n        let vendorCode = \"\";\n        if (vendorId) {\n            const vendorResult = await amplifyServerService.getVendor(vendorId);\n            const vendor = vendorResult?.data;\n            if (vendor && vendor.settings) {\n                try {\n                    const settings = JSON.parse(vendor.settings);\n                    vendorCode = settings.code || \"\";\n                } catch (e) {\n                    console.error(\"Error parsing vendor settings:\", e);\n                }\n            }\n        }\n        // Handle mixed TEST/LIVE links if counts are provided\n        if (testCount !== undefined && liveCount !== undefined) {\n            // Generate TEST links\n            for(let i = 0; i < testCount; i++){\n                const baseUid = (0,nanoid__WEBPACK_IMPORTED_MODULE_0__.nanoid)(8); // Generate a shorter base ID\n                const uid = vendorCode ? `${vendorCode}_TEST_${baseUid}` : `TEST_${baseUid}`;\n                const linkData = {\n                    projectId,\n                    uid,\n                    vendorId: vendorId || undefined,\n                    status: \"UNUSED\",\n                    metadata: JSON.stringify({\n                        originalUrl,\n                        linkType: \"TEST\",\n                        geoRestriction: geoRestriction && geoRestriction.length > 0 ? geoRestriction : undefined\n                    })\n                };\n                creationPromises.push(amplifyServerService.createSurveyLink(linkData));\n            }\n            // Generate LIVE links\n            for(let i = 0; i < liveCount; i++){\n                const baseUid = (0,nanoid__WEBPACK_IMPORTED_MODULE_0__.nanoid)(8); // Generate a shorter base ID\n                const uid = vendorCode ? `${vendorCode}_LIVE_${baseUid}` : `LIVE_${baseUid}`;\n                const linkData = {\n                    projectId,\n                    uid,\n                    vendorId: vendorId || undefined,\n                    status: \"UNUSED\",\n                    metadata: JSON.stringify({\n                        originalUrl,\n                        linkType: \"LIVE\",\n                        geoRestriction: geoRestriction && geoRestriction.length > 0 ? geoRestriction : undefined\n                    })\n                };\n                creationPromises.push(amplifyServerService.createSurveyLink(linkData));\n            }\n        } else {\n            // Original behavior - generate all links of the same type\n            for(let i = 0; i < count; i++){\n                const baseUid = (0,nanoid__WEBPACK_IMPORTED_MODULE_0__.nanoid)(8); // Generate a shorter base ID\n                const linkType_prefix = linkType || \"LIVE\";\n                const uid = vendorCode ? `${vendorCode}_${linkType_prefix}_${baseUid}` : `${linkType_prefix}_${baseUid}`;\n                const linkData = {\n                    projectId,\n                    uid,\n                    vendorId: vendorId || undefined,\n                    status: \"UNUSED\",\n                    metadata: JSON.stringify({\n                        originalUrl,\n                        linkType: linkType || \"LIVE\",\n                        geoRestriction: geoRestriction && geoRestriction.length > 0 ? geoRestriction : undefined\n                    })\n                };\n                creationPromises.push(amplifyServerService.createSurveyLink(linkData));\n            }\n        }\n        // Execute all creation promises\n        const createdLinksResults = await Promise.all(creationPromises);\n        // Get the created links with vendor information\n        const createdLinksResponse = await amplifyServerService.listSurveyLinksByProject(projectId);\n        // Sort by creation date with null safety\n        const sortedLinks = createdLinksResponse.data.filter((link)=>{\n            // Check if metadata contains originalUrl\n            try {\n                const metadata = link.metadata ? JSON.parse(link.metadata) : {};\n                return metadata.originalUrl === originalUrl;\n            } catch (e) {\n                return false;\n            }\n        }).sort((a, b)=>{\n            // First sort by vendor (links without vendor come first)\n            const vendorA = a.vendorId || \"\";\n            const vendorB = b.vendorId || \"\";\n            if (vendorA !== vendorB) {\n                if (!vendorA) return -1; // No vendor links first\n                if (!vendorB) return 1;\n                return vendorA.localeCompare(vendorB); // Then alphabetically by vendor ID\n            }\n            // Within same vendor, sort by creation date (newest first)\n            const dateA = a.createdAt ? new Date(a.createdAt).getTime() : 0;\n            const dateB = b.createdAt ? new Date(b.createdAt).getTime() : 0;\n            return dateB - dateA;\n        }).slice(0, totalCount);\n        // Get vendor information for links that have vendors\n        const vendorIds = sortedLinks.filter((link)=>link.vendorId).map((link)=>link.vendorId); // Add type assertion to ensure string type\n        const vendorResults = vendorIds.length > 0 ? await amplifyServerService.listVendors({\n            id: {\n                in: vendorIds\n            }\n        }) : {\n            data: []\n        };\n        const vendors = vendorResults.data.reduce((acc, vendor)=>{\n            // Fix: Add null safety for vendor id index access\n            if (vendor && vendor.id) {\n                // Extract vendor code from settings if it exists\n                let vendorCode = \"\";\n                try {\n                    const settings = vendor.settings ? JSON.parse(vendor.settings) : {};\n                    vendorCode = settings.code || \"\";\n                } catch (e) {\n                    // If parsing fails, use an empty string\n                    vendorCode = \"\";\n                }\n                acc[vendor.id] = {\n                    name: vendor.name || \"\",\n                    code: vendorCode\n                };\n            }\n            return acc;\n        }, {});\n        // Use the appropriate domain for link generation\n        const domain = getDomain(useDevelopmentDomain);\n        const protocol = useDevelopmentDomain ? \"http\" : \"https\";\n        const baseUrl = `${protocol}://${domain}`; // Format the response with complete URLs\n        const formattedLinks = sortedLinks.map((link)=>{\n            const fullUrl = `${baseUrl}/s/${projectId}/${link.uid}`;\n            // Extract data from metadata JSON\n            let linkMetadata = {};\n            try {\n                linkMetadata = link.metadata ? JSON.parse(link.metadata) : {};\n            } catch (e) {\n                // If parsing fails, use an empty object\n                linkMetadata = {};\n            }\n            // Get geo restriction data\n            let geoRestrictionData = null;\n            if (linkMetadata.geoRestriction) {\n                geoRestrictionData = linkMetadata.geoRestriction;\n            }\n            return {\n                id: link.id,\n                uid: link.uid,\n                originalUrl: linkMetadata.originalUrl || \"\",\n                status: link.status,\n                linkType: linkMetadata.linkType || \"LIVE\",\n                fullUrl: fullUrl,\n                geoRestriction: geoRestrictionData,\n                vendor: link.vendorId ? vendors[link.vendorId] : null,\n                createdAt: link.createdAt\n            };\n        });\n        // Log successful creation\n        await _lib_security_service__WEBPACK_IMPORTED_MODULE_2__.securityService.logSecurityEvent(\"LINK_GENERATION_SUCCESS\", {\n            projectId,\n            count: formattedLinks.length\n        });\n        return res.status(200).json({\n            success: true,\n            count: formattedLinks.length,\n            links: formattedLinks\n        });\n    } catch (error) {\n        console.error(\"Error generating links:\", error);\n        // Log error\n        await _lib_security_service__WEBPACK_IMPORTED_MODULE_2__.securityService.logSecurityEvent(\"LINK_GENERATION_ERROR\", {\n            // Fix: Handle unknown error type properly\n            error: error instanceof Error ? error.message : String(error)\n        });\n        return res.status(500).json({\n            success: false,\n            message: \"Failed to generate links\"\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/links/generate.ts\n");

/***/ }),

/***/ "(api)/./amplify_outputs.json":
/*!******************************!*\
  !*** ./amplify_outputs.json ***!
  \******************************/
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"auth":{"user_pool_id":"us-east-1_Gh00T12dW","aws_region":"us-east-1","user_pool_client_id":"5e5a5drp00jd43tr7ph1ceg412","identity_pool_id":"us-east-1:a0b02f73-93a3-4b52-b1cb-eaa306375a33","mfa_methods":["SMS"],"standard_required_attributes":["email"],"username_attributes":["email"],"user_verification_types":["email"],"groups":[],"mfa_configuration":"OPTIONAL","password_policy":{"min_length":8,"require_lowercase":true,"require_numbers":true,"require_symbols":true,"require_uppercase":true},"unauthenticated_identities_enabled":true},"data":{"url":"https://vth6pntotrhvfpxo2gwn3kzqry.appsync-api.us-east-1.amazonaws.com/graphql","aws_region":"us-east-1","api_key":"da2-ee26yqskvzfpjpquwbi53shbvu","default_authorization_type":"AWS_IAM","authorization_types":["API_KEY","AMAZON_COGNITO_USER_POOLS"],"model_introspection":{"version":1,"models":{"Project":{"name":"Project","fields":{"id":{"name":"id","isArray":false,"type":"ID","isRequired":true,"attributes":[]},"name":{"name":"name","isArray":false,"type":"String","isRequired":true,"attributes":[]},"description":{"name":"description","isArray":false,"type":"String","isRequired":false,"attributes":[]},"status":{"name":"status","isArray":false,"type":{"enum":"ProjectStatus"},"isRequired":false,"attributes":[]},"targetCompletions":{"name":"targetCompletions","isArray":false,"type":"Int","isRequired":true,"attributes":[]},"currentCompletions":{"name":"currentCompletions","isArray":false,"type":"Int","isRequired":true,"attributes":[]},"surveyUrl":{"name":"surveyUrl","isArray":false,"type":"String","isRequired":true,"attributes":[]},"createdAt":{"name":"createdAt","isArray":false,"type":"AWSDateTime","isRequired":true,"attributes":[]},"updatedAt":{"name":"updatedAt","isArray":false,"type":"AWSDateTime","isRequired":true,"attributes":[]},"settings":{"name":"settings","isArray":false,"type":"AWSJSON","isRequired":false,"attributes":[]}},"syncable":true,"pluralName":"Projects","attributes":[{"type":"model","properties":{}},{"type":"auth","properties":{"rules":[{"allow":"private","operations":["create","read","update","delete"]}]}}],"primaryKeyInfo":{"isCustomPrimaryKey":false,"primaryKeyFieldName":"id","sortKeyFieldNames":[]}},"Question":{"name":"Question","fields":{"id":{"name":"id","isArray":false,"type":"ID","isRequired":true,"attributes":[]},"projectId":{"name":"projectId","isArray":false,"type":"ID","isRequired":false,"attributes":[]},"text":{"name":"text","isArray":false,"type":"String","isRequired":true,"attributes":[]},"type":{"name":"type","isArray":false,"type":{"enum":"QuestionType"},"isRequired":false,"attributes":[]},"options":{"name":"options","isArray":false,"type":"AWSJSON","isRequired":false,"attributes":[]},"sequence":{"name":"sequence","isArray":false,"type":"Int","isRequired":true,"attributes":[]},"isRequired":{"name":"isRequired","isArray":false,"type":"Boolean","isRequired":true,"attributes":[]},"createdAt":{"name":"createdAt","isArray":false,"type":"AWSDateTime","isRequired":true,"attributes":[]},"updatedAt":{"name":"updatedAt","isArray":false,"type":"AWSDateTime","isRequired":true,"attributes":[]}},"syncable":true,"pluralName":"Questions","attributes":[{"type":"model","properties":{}},{"type":"auth","properties":{"rules":[{"allow":"private","operations":["create","read","update","delete"]}]}}],"primaryKeyInfo":{"isCustomPrimaryKey":false,"primaryKeyFieldName":"id","sortKeyFieldNames":[]}},"SurveyLink":{"name":"SurveyLink","fields":{"id":{"name":"id","isArray":false,"type":"ID","isRequired":true,"attributes":[]},"projectId":{"name":"projectId","isArray":false,"type":"ID","isRequired":false,"attributes":[]},"uid":{"name":"uid","isArray":false,"type":"String","isRequired":true,"attributes":[]},"status":{"name":"status","isArray":false,"type":{"enum":"SurveyLinkStatus"},"isRequired":false,"attributes":[]},"createdAt":{"name":"createdAt","isArray":false,"type":"AWSDateTime","isRequired":true,"attributes":[]},"updatedAt":{"name":"updatedAt","isArray":false,"type":"AWSDateTime","isRequired":true,"attributes":[]},"clickedAt":{"name":"clickedAt","isArray":false,"type":"AWSDateTime","isRequired":false,"attributes":[]},"completedAt":{"name":"completedAt","isArray":false,"type":"AWSDateTime","isRequired":false,"attributes":[]},"ipAddress":{"name":"ipAddress","isArray":false,"type":"String","isRequired":false,"attributes":[]},"userAgent":{"name":"userAgent","isArray":false,"type":"String","isRequired":false,"attributes":[]},"geoData":{"name":"geoData","isArray":false,"type":"AWSJSON","isRequired":false,"attributes":[]},"metadata":{"name":"metadata","isArray":false,"type":"AWSJSON","isRequired":false,"attributes":[]},"vendorId":{"name":"vendorId","isArray":false,"type":"ID","isRequired":false,"attributes":[]}},"syncable":true,"pluralName":"SurveyLinks","attributes":[{"type":"model","properties":{}},{"type":"auth","properties":{"rules":[{"allow":"private","operations":["create","read","update","delete"]},{"allow":"public","provider":"iam","operations":["read","update"]}]}}],"primaryKeyInfo":{"isCustomPrimaryKey":false,"primaryKeyFieldName":"id","sortKeyFieldNames":[]}},"Vendor":{"name":"Vendor","fields":{"id":{"name":"id","isArray":false,"type":"ID","isRequired":true,"attributes":[]},"name":{"name":"name","isArray":false,"type":"String","isRequired":true,"attributes":[]},"contactName":{"name":"contactName","isArray":false,"type":"String","isRequired":false,"attributes":[]},"contactEmail":{"name":"contactEmail","isArray":false,"type":"String","isRequired":false,"attributes":[]},"settings":{"name":"settings","isArray":false,"type":"AWSJSON","isRequired":false,"attributes":[]},"createdAt":{"name":"createdAt","isArray":false,"type":"AWSDateTime","isRequired":true,"attributes":[]},"updatedAt":{"name":"updatedAt","isArray":false,"type":"AWSDateTime","isRequired":true,"attributes":[]}},"syncable":true,"pluralName":"Vendors","attributes":[{"type":"model","properties":{}},{"type":"auth","properties":{"rules":[{"allow":"private","operations":["create","read","update","delete"]}]}}],"primaryKeyInfo":{"isCustomPrimaryKey":false,"primaryKeyFieldName":"id","sortKeyFieldNames":[]}},"ProjectVendor":{"name":"ProjectVendor","fields":{"id":{"name":"id","isArray":false,"type":"ID","isRequired":true,"attributes":[]},"projectId":{"name":"projectId","isArray":false,"type":"ID","isRequired":false,"attributes":[]},"vendorId":{"name":"vendorId","isArray":false,"type":"ID","isRequired":false,"attributes":[]},"quota":{"name":"quota","isArray":false,"type":"Int","isRequired":true,"attributes":[]},"currentCount":{"name":"currentCount","isArray":false,"type":"Int","isRequired":true,"attributes":[]},"createdAt":{"name":"createdAt","isArray":false,"type":"AWSDateTime","isRequired":true,"attributes":[]},"updatedAt":{"name":"updatedAt","isArray":false,"type":"AWSDateTime","isRequired":true,"attributes":[]}},"syncable":true,"pluralName":"ProjectVendors","attributes":[{"type":"model","properties":{}},{"type":"auth","properties":{"rules":[{"allow":"private","operations":["create","read","update","delete"]}]}}],"primaryKeyInfo":{"isCustomPrimaryKey":false,"primaryKeyFieldName":"id","sortKeyFieldNames":[]}}},"enums":{"ProjectStatus":{"name":"ProjectStatus","values":["ACTIVE","PAUSED","COMPLETED"]},"QuestionType":{"name":"QuestionType","values":["MULTIPLE_CHOICE","TEXT","COUNTRY","SCALE"]},"SurveyLinkStatus":{"name":"SurveyLinkStatus","values":["UNUSED","CLICKED","COMPLETED","DISQUALIFIED","QUOTA_FULL"]}},"nonModels":{}}},"version":"1.3"}');

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Flinks%2Fgenerate&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Flinks%2Fgenerate.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();