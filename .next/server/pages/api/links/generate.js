"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/links/generate";
exports.ids = ["pages/api/links/generate"];
exports.modules = {

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "aws-amplify":
/*!******************************!*\
  !*** external "aws-amplify" ***!
  \******************************/
/***/ ((module) => {

module.exports = import("aws-amplify");;

/***/ }),

/***/ "aws-amplify/api":
/*!**********************************!*\
  !*** external "aws-amplify/api" ***!
  \**********************************/
/***/ ((module) => {

module.exports = import("aws-amplify/api");;

/***/ }),

/***/ "aws-amplify/auth":
/*!***********************************!*\
  !*** external "aws-amplify/auth" ***!
  \***********************************/
/***/ ((module) => {

module.exports = import("aws-amplify/auth");;

/***/ }),

/***/ "nanoid":
/*!*************************!*\
  !*** external "nanoid" ***!
  \*************************/
/***/ ((module) => {

module.exports = import("nanoid");;

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Flinks%2Fgenerate&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Flinks%2Fgenerate.ts&middlewareConfigBase64=e30%3D!":
/*!********************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Flinks%2Fgenerate&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Flinks%2Fgenerate.ts&middlewareConfigBase64=e30%3D! ***!
  \********************************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _src_pages_api_links_generate_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/pages/api/links/generate.ts */ \"(api)/./src/pages/api/links/generate.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_src_pages_api_links_generate_ts__WEBPACK_IMPORTED_MODULE_3__]);\n_src_pages_api_links_generate_ts__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_src_pages_api_links_generate_ts__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_src_pages_api_links_generate_ts__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/links/generate\",\n        pathname: \"/api/links/generate\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _src_pages_api_links_generate_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmxpbmtzJTJGZ2VuZXJhdGUmcHJlZmVycmVkUmVnaW9uPSZhYnNvbHV0ZVBhZ2VQYXRoPS4lMkZzcmMlMkZwYWdlcyUyRmFwaSUyRmxpbmtzJTJGZ2VuZXJhdGUudHMmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ0w7QUFDMUQ7QUFDOEQ7QUFDOUQ7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLDZEQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLGVBQWUsd0VBQUssQ0FBQyw2REFBUTtBQUNwQztBQUNPLHdCQUF3QixnSEFBbUI7QUFDbEQ7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWTtBQUNaLENBQUM7O0FBRUQscUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdXJ2ZXktbGluay13cmFwcGVyLz8zYTZlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2VzQVBJUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgaG9pc3QgfSBmcm9tIFwibmV4dC9kaXN0L2J1aWxkL3RlbXBsYXRlcy9oZWxwZXJzXCI7XG4vLyBJbXBvcnQgdGhlIHVzZXJsYW5kIGNvZGUuXG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiLi9zcmMvcGFnZXMvYXBpL2xpbmtzL2dlbmVyYXRlLnRzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsIFwiZGVmYXVsdFwiKTtcbi8vIFJlLWV4cG9ydCBjb25maWcuXG5leHBvcnQgY29uc3QgY29uZmlnID0gaG9pc3QodXNlcmxhbmQsIFwiY29uZmlnXCIpO1xuLy8gQ3JlYXRlIGFuZCBleHBvcnQgdGhlIHJvdXRlIG1vZHVsZSB0aGF0IHdpbGwgYmUgY29uc3VtZWQuXG5leHBvcnQgY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgUGFnZXNBUElSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuUEFHRVNfQVBJLFxuICAgICAgICBwYWdlOiBcIi9hcGkvbGlua3MvZ2VuZXJhdGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9saW5rcy9nZW5lcmF0ZVwiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcIlwiXG4gICAgfSxcbiAgICB1c2VybGFuZFxufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2VzLWFwaS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Flinks%2Fgenerate&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Flinks%2Fgenerate.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./src/lib/amplify-config.ts":
/*!***********************************!*\
  !*** ./src/lib/amplify-config.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAmplifyConfig: () => (/* binding */ getAmplifyConfig)\n/* harmony export */ });\n/* harmony import */ var _amplify_outputs_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../amplify_outputs.json */ \"(api)/./amplify_outputs.json\");\n\n// Export the Amplify Gen 2 configuration\nfunction getAmplifyConfig() {\n    return _amplify_outputs_json__WEBPACK_IMPORTED_MODULE_0__;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvbGliL2FtcGxpZnktY29uZmlnLnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXdEO0FBRXhELHlDQUF5QztBQUNsQyxTQUFTQztJQUNkLE9BQU9ELGtEQUFjQTtBQUN2QiIsInNvdXJjZXMiOlsid2VicGFjazovL3N1cnZleS1saW5rLXdyYXBwZXIvLi9zcmMvbGliL2FtcGxpZnktY29uZmlnLnRzPzRhYjYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGFtcGxpZnlPdXRwdXRzIGZyb20gJy4uLy4uL2FtcGxpZnlfb3V0cHV0cy5qc29uJztcblxuLy8gRXhwb3J0IHRoZSBBbXBsaWZ5IEdlbiAyIGNvbmZpZ3VyYXRpb25cbmV4cG9ydCBmdW5jdGlvbiBnZXRBbXBsaWZ5Q29uZmlnKCkge1xuICByZXR1cm4gYW1wbGlmeU91dHB1dHM7XG59Il0sIm5hbWVzIjpbImFtcGxpZnlPdXRwdXRzIiwiZ2V0QW1wbGlmeUNvbmZpZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./src/lib/amplify-config.ts\n");

/***/ }),

/***/ "(api)/./src/lib/amplify-data-service.ts":
/*!*****************************************!*\
  !*** ./src/lib/amplify-data-service.ts ***!
  \*****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAmplifyDataService: () => (/* binding */ getAmplifyDataService)\n/* harmony export */ });\n/* harmony import */ var aws_amplify_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! aws-amplify/api */ \"aws-amplify/api\");\n/* harmony import */ var aws_amplify__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! aws-amplify */ \"aws-amplify\");\n/* harmony import */ var _amplify_config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./amplify-config */ \"(api)/./src/lib/amplify-config.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([aws_amplify_api__WEBPACK_IMPORTED_MODULE_0__, aws_amplify__WEBPACK_IMPORTED_MODULE_1__]);\n([aws_amplify_api__WEBPACK_IMPORTED_MODULE_0__, aws_amplify__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\nlet amplifyDataService = null;\nasync function getAmplifyDataService() {\n    if (true) {\n        throw new Error(\"amplifyDataService can only be used on the client/browser.\");\n    }\n    if (amplifyDataService) return amplifyDataService;\n    const amplifyConfig = (0,_amplify_config__WEBPACK_IMPORTED_MODULE_2__.getAmplifyConfig)();\n    if (!amplifyConfig?.data?.url) {\n        throw new Error(\"Amplify config is missing GraphQL endpoint.\");\n    }\n    aws_amplify__WEBPACK_IMPORTED_MODULE_1__.Amplify.configure(amplifyConfig);\n    const client = (0,aws_amplify_api__WEBPACK_IMPORTED_MODULE_0__.generateClient)({\n        authMode: \"userPool\"\n    });\n    // Debug logging\n    console.log(\"Amplify Data client:\", client);\n    console.log(\"client.models:\", client.models);\n    // Check if models are available\n    if (!client.models || Object.keys(client.models).length === 0) {\n        console.error(\"client.models is empty! This usually means the Amplify backend is not properly connected.\");\n        throw new Error(\"Amplify Data models are not available. Please check your backend connection.\");\n    }\n    // Verify required models exist\n    const requiredModels = [\n        \"Project\",\n        \"Vendor\",\n        \"Question\",\n        \"SurveyLink\",\n        \"ProjectVendor\"\n    ];\n    for (const modelName of requiredModels){\n        if (!client.models[modelName]) {\n            console.error(`${modelName} model is missing from Amplify Data client!`);\n            throw new Error(`Required model ${modelName} is not available in the Amplify Data client.`);\n        }\n    }\n    console.log(\"All required models are available:\", requiredModels);\n    // Helper to safely unwrap data from Amplify responses\n    const unwrapData = (result)=>result.data;\n    // Helper to handle Amplify errors in a consistent way\n    const handleAmplifyError = (error, operation)=>{\n        const errorMessage = error.message || \"Unknown error\";\n        const errorName = error.name || \"Error\";\n        console.error(`Amplify Error (${operation}):`, {\n            name: errorName,\n            message: errorMessage\n        });\n        throw error;\n    };\n    amplifyDataService = {\n        client,\n        projects: {\n            create: async (data)=>{\n                try {\n                    const result = await client.models.Project.create(data);\n                    return {\n                        data: unwrapData(result)\n                    };\n                } catch (error) {\n                    handleAmplifyError(error, \"projects.create\");\n                    return {\n                        data: null\n                    };\n                }\n            },\n            get: async (id)=>{\n                const result = await client.models.Project.get({\n                    id\n                });\n                return {\n                    data: unwrapData(result)\n                };\n            },\n            list: async (filter)=>{\n                const result = await client.models.Project.list(filter);\n                return {\n                    data: result.data || []\n                };\n            },\n            update: async (id, data)=>{\n                const result = await client.models.Project.update({\n                    id,\n                    ...data\n                });\n                return {\n                    data: unwrapData(result)\n                };\n            },\n            delete: async (id)=>{\n                const result = await client.models.Project.delete({\n                    id\n                });\n                return {\n                    data: unwrapData(result)\n                };\n            },\n            getWithRelations: async (id)=>{\n                // Fetch project and related data separately\n                const project = await client.models.Project.get({\n                    id\n                });\n                if (project.data) {\n                    // Fetch related data separately\n                    const surveyLinks = await client.models.SurveyLink.list({\n                        filter: {\n                            projectId: {\n                                eq: id\n                            }\n                        }\n                    });\n                    // First get ProjectVendor relationships for this project\n                    const projectVendors = await client.models.ProjectVendor.list({\n                        filter: {\n                            projectId: {\n                                eq: id\n                            }\n                        }\n                    });\n                    // Then get the actual vendors if there are project-vendor relationships\n                    const vendorIds = projectVendors.data.map((pv)=>pv.vendorId).filter((id)=>id !== null && id !== undefined);\n                    let vendorData = [];\n                    // Fetch vendors if there are any relationships\n                    if (vendorIds.length > 0) {\n                        const vendorResults = await Promise.all(vendorIds.map((vid)=>client.models.Vendor.get({\n                                id: vid\n                            })));\n                        // Extract data from each result\n                        vendorData = vendorResults.filter((result)=>result.data !== null).map((result)=>result.data);\n                    }\n                    const questions = await client.models.Question.list({\n                        filter: {\n                            projectId: {\n                                eq: id\n                            }\n                        }\n                    });\n                    // Combine project with its related data\n                    return {\n                        data: {\n                            ...project.data,\n                            surveyLinks: surveyLinks.data || [],\n                            vendors: vendorData,\n                            questions: questions.data || []\n                        }\n                    };\n                }\n                return {\n                    data: null\n                };\n            }\n        },\n        surveyLinks: {\n            create: async (data)=>{\n                const result = await client.models.SurveyLink.create(data);\n                return {\n                    data: unwrapData(result)\n                };\n            },\n            get: async (id)=>{\n                const result = await client.models.SurveyLink.get({\n                    id\n                });\n                return {\n                    data: unwrapData(result)\n                };\n            },\n            getByUid: async (uid)=>{\n                const results = await client.models.SurveyLink.list({\n                    filter: {\n                        uid: {\n                            eq: uid\n                        }\n                    }\n                });\n                return {\n                    data: results.data && results.data.length > 0 ? results.data[0] : null\n                };\n            },\n            update: async (id, data)=>{\n                const result = await client.models.SurveyLink.update({\n                    id,\n                    ...data\n                });\n                return {\n                    data: unwrapData(result)\n                };\n            },\n            list: async (filter)=>{\n                const result = await client.models.SurveyLink.list(filter);\n                return {\n                    data: result.data || []\n                };\n            },\n            listByProject: async (projectId)=>{\n                const result = await client.models.SurveyLink.list({\n                    filter: {\n                        projectId: {\n                            eq: projectId\n                        }\n                    }\n                });\n                return {\n                    data: result.data || []\n                };\n            },\n            delete: async (id)=>{\n                const result = await client.models.SurveyLink.delete({\n                    id\n                });\n                return {\n                    data: unwrapData(result)\n                };\n            }\n        },\n        vendors: {\n            create: async (data)=>{\n                const result = await client.models.Vendor.create(data);\n                return {\n                    data: unwrapData(result)\n                };\n            },\n            get: async (id)=>{\n                const result = await client.models.Vendor.get({\n                    id\n                });\n                return {\n                    data: unwrapData(result)\n                };\n            },\n            list: async (filter)=>{\n                const result = await client.models.Vendor.list(filter);\n                return {\n                    data: result.data || []\n                };\n            },\n            listByProject: async (projectId)=>{\n                // Get project-vendor relationships first\n                const projectVendors = await client.models.ProjectVendor.list({\n                    filter: {\n                        projectId: {\n                            eq: projectId\n                        }\n                    }\n                });\n                // Get vendor IDs from relationships\n                const vendorIds = projectVendors.data.map((pv)=>pv.vendorId).filter((id)=>id !== null && id !== undefined);\n                // Fetch each vendor individually if there are any relationships\n                if (vendorIds.length > 0) {\n                    const vendorResults = await Promise.all(vendorIds.map((vid)=>client.models.Vendor.get({\n                            id: vid\n                        })));\n                    // Extract data from each result and filter out nulls\n                    const vendorData = vendorResults.map((result)=>result.data).filter((v)=>v !== null);\n                    return {\n                        data: vendorData\n                    };\n                }\n                return {\n                    data: []\n                };\n            },\n            update: async (id, data)=>{\n                const result = await client.models.Vendor.update({\n                    id,\n                    ...data\n                });\n                return {\n                    data: unwrapData(result)\n                };\n            },\n            delete: async (id)=>{\n                const result = await client.models.Vendor.delete({\n                    id\n                });\n                return {\n                    data: unwrapData(result)\n                };\n            }\n        },\n        questions: {\n            create: async (data)=>{\n                const result = await client.models.Question.create(data);\n                return {\n                    data: unwrapData(result)\n                };\n            },\n            get: async (id)=>{\n                const result = await client.models.Question.get({\n                    id\n                });\n                return {\n                    data: unwrapData(result)\n                };\n            },\n            list: async (filter)=>{\n                const result = await client.models.Question.list(filter);\n                return {\n                    data: result.data || []\n                };\n            },\n            listByProject: async (projectId)=>{\n                const result = await client.models.Question.list({\n                    filter: {\n                        projectId: {\n                            eq: projectId\n                        }\n                    }\n                });\n                return {\n                    data: result.data || []\n                };\n            },\n            update: async (id, data)=>{\n                const result = await client.models.Question.update({\n                    id,\n                    ...data\n                });\n                return {\n                    data: unwrapData(result)\n                };\n            },\n            delete: async (id)=>{\n                const result = await client.models.Question.delete({\n                    id\n                });\n                return {\n                    data: unwrapData(result)\n                };\n            }\n        },\n        // Helper for transactions (not directly supported in Amplify Data, using batch operations)\n        transaction: {\n            execute: async (operations)=>{\n                // Execute operations in sequence\n                const results = [];\n                for (const operation of operations){\n                    const result = await operation;\n                    results.push(result);\n                }\n                return results;\n            }\n        }\n    };\n    return amplifyDataService;\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/lib/amplify-data-service.ts\n");

/***/ }),

/***/ "(api)/./src/lib/amplify-server-service.ts":
/*!*******************************************!*\
  !*** ./src/lib/amplify-server-service.ts ***!
  \*******************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAmplifyServerService: () => (/* binding */ getAmplifyServerService)\n/* harmony export */ });\n/* harmony import */ var aws_amplify__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! aws-amplify */ \"aws-amplify\");\n/* harmony import */ var _amplify_outputs_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../amplify_outputs.json */ \"(api)/./amplify_outputs.json\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([aws_amplify__WEBPACK_IMPORTED_MODULE_0__]);\naws_amplify__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n// Initialize Amplify\naws_amplify__WEBPACK_IMPORTED_MODULE_0__.Amplify.configure(_amplify_outputs_json__WEBPACK_IMPORTED_MODULE_1__);\nclass AmplifyServerService {\n    constructor(){\n        this.apiEndpoint = _amplify_outputs_json__WEBPACK_IMPORTED_MODULE_1__.data.url;\n        this.apiKey = _amplify_outputs_json__WEBPACK_IMPORTED_MODULE_1__.data.api_key;\n    }\n    async makeGraphQLRequest(query, variables = {}) {\n        try {\n            const response = await fetch(this.apiEndpoint, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"x-api-key\": this.apiKey\n                },\n                body: JSON.stringify({\n                    query,\n                    variables\n                })\n            });\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            return await response.json();\n        } catch (error) {\n            console.error(\"GraphQL request failed:\", error);\n            throw error;\n        }\n    }\n    // Project operations\n    async getProject(id) {\n        const query = `\n      query GetProject($id: ID!) {\n        getProject(id: $id) {\n          id\n          name\n          description\n          status\n          createdAt\n          updatedAt\n        }\n      }\n    `;\n        const result = await this.makeGraphQLRequest(query, {\n            id\n        });\n        return {\n            data: result.data?.getProject || null\n        };\n    }\n    // Vendor operations\n    async getVendor(id) {\n        const query = `\n      query GetVendor($id: ID!) {\n        getVendor(id: $id) {\n          id\n          name\n          status\n          createdAt\n          updatedAt\n        }\n      }\n    `;\n        const result = await this.makeGraphQLRequest(query, {\n            id\n        });\n        return {\n            data: result.data?.getVendor || null\n        };\n    }\n    async listVendors(filter) {\n        const query = `\n      query ListVendors($filter: ModelVendorFilterInput) {\n        listVendors(filter: $filter) {\n          items {\n            id\n            name\n            status\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    `;\n        const result = await this.makeGraphQLRequest(query, {\n            filter\n        });\n        return {\n            data: result.data?.listVendors?.items || []\n        };\n    }\n    // SurveyLink operations\n    async createSurveyLink(input) {\n        const query = `\n      mutation CreateSurveyLink($input: CreateSurveyLinkInput!) {\n        createSurveyLink(input: $input) {\n          id\n          projectId\n          uid\n          vendorId\n          status\n          metadata\n          createdAt\n          updatedAt\n          clickedAt\n          completedAt\n          ipAddress\n          userAgent\n          geoData\n        }\n      }\n    `;\n        const result = await this.makeGraphQLRequest(query, {\n            input\n        });\n        return {\n            data: result.data?.createSurveyLink || null\n        };\n    }\n    async listSurveyLinksByProject(projectId) {\n        const query = `\n      query ListSurveyLinks($filter: ModelSurveyLinkFilterInput) {\n        listSurveyLinks(filter: $filter) {\n          items {\n            id\n            projectId\n            uid\n            vendorId\n            status\n            metadata\n            createdAt\n            updatedAt\n            clickedAt\n            completedAt\n            ipAddress\n            userAgent\n            geoData\n          }\n        }\n      }\n    `;\n        const filter = {\n            projectId: {\n                eq: projectId\n            }\n        };\n        const result = await this.makeGraphQLRequest(query, {\n            filter\n        });\n        return {\n            data: result.data?.listSurveyLinks?.items || []\n        };\n    }\n    async getSurveyLinkByUid(uid) {\n        const query = `\n      query ListSurveyLinks($filter: ModelSurveyLinkFilterInput) {\n        listSurveyLinks(filter: $filter) {\n          items {\n            id\n            projectId\n            uid\n            vendorId\n            status\n            metadata\n            createdAt\n            updatedAt\n            clickedAt\n            completedAt\n            ipAddress\n            userAgent\n            geoData\n          }\n        }\n      }\n    `;\n        const filter = {\n            uid: {\n                eq: uid\n            }\n        };\n        const result = await this.makeGraphQLRequest(query, {\n            filter\n        });\n        const items = result.data?.listSurveyLinks?.items || [];\n        return {\n            data: items.length > 0 ? items[0] : null\n        };\n    }\n    async updateSurveyLink(id, input) {\n        const query = `\n      mutation UpdateSurveyLink($input: UpdateSurveyLinkInput!) {\n        updateSurveyLink(input: $input) {\n          id\n          projectId\n          uid\n          vendorId\n          status\n          metadata\n          createdAt\n          updatedAt\n          clickedAt\n          completedAt\n          ipAddress\n          userAgent\n          geoData\n        }\n      }\n    `;\n        const updateInput = {\n            id,\n            ...input\n        };\n        const result = await this.makeGraphQLRequest(query, {\n            input: updateInput\n        });\n        return {\n            data: result.data?.updateSurveyLink || null\n        };\n    }\n    // Question operations\n    async createQuestion(input) {\n        const query = `\n      mutation CreateQuestion($input: CreateQuestionInput!) {\n        createQuestion(input: $input) {\n          id\n          projectId\n          text\n          type\n          options\n          sequence\n          isRequired\n          isTrap\n          settings\n          createdAt\n          updatedAt\n        }\n      }\n    `;\n        const result = await this.makeGraphQLRequest(query, {\n            input\n        });\n        return {\n            data: result.data?.createQuestion || null\n        };\n    }\n    async listQuestionsByProject(projectId) {\n        const query = `\n      query ListQuestions($filter: ModelQuestionFilterInput) {\n        listQuestions(filter: $filter) {\n          items {\n            id\n            projectId\n            text\n            type\n            options\n            sequence\n            isRequired\n            isTrap\n            settings\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    `;\n        const filter = {\n            projectId: {\n                eq: projectId\n            }\n        };\n        const result = await this.makeGraphQLRequest(query, {\n            filter\n        });\n        return {\n            data: result.data?.listQuestions?.items || []\n        };\n    }\n    async deleteQuestion(id) {\n        const query = `\n      mutation DeleteQuestion($input: DeleteQuestionInput!) {\n        deleteQuestion(input: $input) {\n          id\n        }\n      }\n    `;\n        const result = await this.makeGraphQLRequest(query, {\n            input: {\n                id\n            }\n        });\n        return {\n            data: result.data?.deleteQuestion || null\n        };\n    }\n    // Response operations\n    async createResponse(input) {\n        const query = `\n      mutation CreateResponse($input: CreateResponseInput!) {\n        createResponse(input: $input) {\n          id\n          surveyLinkId\n          questionId\n          answer\n          metadata\n          createdAt\n          updatedAt\n        }\n      }\n    `;\n        const result = await this.makeGraphQLRequest(query, {\n            input\n        });\n        return {\n            data: result.data?.createResponse || null\n        };\n    }\n    async listResponsesBySurveyLink(surveyLinkId) {\n        const query = `\n      query ListResponses($filter: ModelResponseFilterInput) {\n        listResponses(filter: $filter) {\n          items {\n            id\n            surveyLinkId\n            questionId\n            answer\n            metadata\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    `;\n        const filter = {\n            surveyLinkId: {\n                eq: surveyLinkId\n            }\n        };\n        const result = await this.makeGraphQLRequest(query, {\n            filter\n        });\n        return {\n            data: result.data?.listResponses?.items || []\n        };\n    }\n    // ProjectVendor operations\n    async listProjectVendors(filter) {\n        const query = `\n      query ListProjectVendors($filter: ModelProjectVendorFilterInput) {\n        listProjectVendors(filter: $filter) {\n          items {\n            id\n            projectId\n            vendorId\n            quota\n            currentCount\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    `;\n        const result = await this.makeGraphQLRequest(query, {\n            filter\n        });\n        return {\n            data: result.data?.listProjectVendors?.items || []\n        };\n    }\n    async updateProjectVendor(projectId, vendorId, updates) {\n        // First find the ProjectVendor record\n        const existingResult = await this.listProjectVendors({\n            and: [\n                {\n                    projectId: {\n                        eq: projectId\n                    }\n                },\n                {\n                    vendorId: {\n                        eq: vendorId\n                    }\n                }\n            ]\n        });\n        if (existingResult.data.length === 0) {\n            return {\n                data: null\n            };\n        }\n        const projectVendor = existingResult.data[0];\n        const query = `\n      mutation UpdateProjectVendor($input: UpdateProjectVendorInput!) {\n        updateProjectVendor(input: $input) {\n          id\n          projectId\n          vendorId\n          quota\n          currentCount\n          createdAt\n          updatedAt\n        }\n      }\n    `;\n        const input = {\n            id: projectVendor.id,\n            ...updates\n        };\n        const result = await this.makeGraphQLRequest(query, {\n            input\n        });\n        return {\n            data: result.data?.updateProjectVendor || null\n        };\n    }\n}\n// Create a singleton instance\nlet serverService = null;\nfunction getAmplifyServerService() {\n    if (!serverService) {\n        serverService = new AmplifyServerService();\n    }\n    return serverService;\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/lib/amplify-server-service.ts\n");

/***/ }),

/***/ "(api)/./src/lib/security-service.ts":
/*!*************************************!*\
  !*** ./src/lib/security-service.ts ***!
  \*************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   securityService: () => (/* binding */ securityService)\n/* harmony export */ });\n/* harmony import */ var aws_amplify_auth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! aws-amplify/auth */ \"aws-amplify/auth\");\n/* harmony import */ var _amplify_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./amplify-data-service */ \"(api)/./src/lib/amplify-data-service.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([aws_amplify_auth__WEBPACK_IMPORTED_MODULE_0__, _amplify_data_service__WEBPACK_IMPORTED_MODULE_1__]);\n([aws_amplify_auth__WEBPACK_IMPORTED_MODULE_0__, _amplify_data_service__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n// Domain configuration\nconst MAIN_DOMAIN = \"https://protegeresearchsurvey.com\" || 0;\nconst SHORT_URL_BASE = \"https://https://protegeresearchsurvey.com/s\" || 0;\n// Create stubs for the missing functions that will be implemented later\nconst getVpnStatus = async (ip)=>{\n    // TODO: Implement VPN detection\n    console.log(\"Checking VPN status for IP:\", ip);\n    return {\n        isVpn: false\n    };\n};\nconst getCaptchaVerification = async (token, ip)=>{\n    // TODO: Implement CAPTCHA verification\n    console.log(\"Verifying CAPTCHA token:\", token, \"IP:\", ip);\n    return {\n        score: 0.9\n    };\n};\nconst getGeoLocation = async (ip)=>{\n    // TODO: Implement geo-location lookup\n    console.log(\"Getting geo-location for IP:\", ip);\n    return {\n        country: \"US\",\n        city: \"Unknown\",\n        ip\n    };\n};\n/**\n * Security Service - Handles security features for MCP server integration\n * Centralizes authentication, geo-restriction, VPN detection, and captcha verification\n */ const securityService = {\n    /**\n   * Get current security context including authentication status, geo info, VPN detection\n   */ getSecurityContext: async (ip, captchaToken)=>{\n        // Initialize security context\n        const securityContext = {\n            authenticated: false,\n            detectedVpn: false\n        };\n        try {\n            // Check authentication status using Amplify v6 APIs\n            try {\n                const currentUser = await (0,aws_amplify_auth__WEBPACK_IMPORTED_MODULE_0__.getCurrentUser)();\n                const session = await (0,aws_amplify_auth__WEBPACK_IMPORTED_MODULE_0__.fetchAuthSession)();\n                securityContext.authenticated = true;\n                securityContext.userId = currentUser.userId;\n                // Extract user groups from Cognito tokens using new API structure\n                const accessToken = session.tokens?.accessToken;\n                const payload = accessToken?.payload;\n                securityContext.userGroups = payload?.[\"cognito:groups\"] || [];\n            } catch (error) {\n                // User is not authenticated\n                securityContext.authenticated = false;\n            }\n            // Get geo-location information\n            const geoInfo = await getGeoLocation(ip);\n            if (geoInfo) {\n                securityContext.geoLocation = {\n                    country: geoInfo.country,\n                    city: geoInfo.city,\n                    ip: geoInfo.ip\n                };\n            }\n            // Check VPN status\n            const vpnStatus = await getVpnStatus(ip);\n            securityContext.detectedVpn = vpnStatus.isVpn;\n            // Verify captcha if token provided\n            if (captchaToken) {\n                const captchaResult = await getCaptchaVerification(captchaToken, ip);\n                securityContext.captchaScore = captchaResult.score;\n            }\n            return securityContext;\n        } catch (error) {\n            console.error(\"Error getting security context:\", error);\n            return securityContext;\n        }\n    },\n    /**\n   * Verify access to a survey link based on geo-restrictions and other security rules\n   */ verifySurveyLinkAccess: async (surveyLinkUid, ip, captchaToken)=>{\n        try {\n            const securityContext = await securityService.getSecurityContext(ip, captchaToken);\n            // Get survey link with proper null check\n            if (!surveyLinkUid) {\n                return {\n                    allowed: false,\n                    reason: \"INVALID_LINK_ID\",\n                    securityContext\n                };\n            }\n            const amplifyDataService = await (0,_amplify_data_service__WEBPACK_IMPORTED_MODULE_1__.getAmplifyDataService)();\n            const surveyLink = await amplifyDataService.surveyLinks.getByUid(surveyLinkUid);\n            if (!surveyLink) {\n                return {\n                    allowed: false,\n                    reason: \"LINK_NOT_FOUND\",\n                    securityContext\n                };\n            }\n            // Check if link is already completed or flagged\n            if (surveyLink.data && surveyLink.data.status && [\n                \"COMPLETED\",\n                \"FLAGGED\"\n            ].includes(surveyLink.data.status)) {\n                return {\n                    allowed: false,\n                    reason: \"LINK_ALREADY_USED\",\n                    securityContext\n                };\n            } // Check geo-restrictions if set in project settings\n            if (surveyLink.data && surveyLink.data.projectId && securityContext.geoLocation) {\n                try {\n                    const project = await amplifyDataService.projects.get(surveyLink.data.projectId);\n                    // Get geo-restrictions from project settings if available\n                    const settings = project.data?.settings;\n                    const geoRestriction = settings?.geoRestriction;\n                    if (geoRestriction) {\n                        const allowedCountries = typeof geoRestriction === \"string\" ? JSON.parse(geoRestriction) : geoRestriction;\n                        if (Array.isArray(allowedCountries) && allowedCountries.length > 0 && !allowedCountries.includes(securityContext.geoLocation.country)) {\n                            return {\n                                allowed: false,\n                                reason: \"GEO_RESTRICTED\",\n                                securityContext\n                            };\n                        }\n                    }\n                } catch (e) {\n                    console.error(\"Error parsing geo restrictions:\", e);\n                }\n            }\n            // Check VPN usage if detected (linkType field no longer exists in model)\n            if (securityContext.detectedVpn && surveyLink.data) {\n                return {\n                    allowed: false,\n                    reason: \"VPN_DETECTED\",\n                    securityContext\n                };\n            }\n            // Check captcha score if provided\n            if (captchaToken && securityContext.captchaScore !== undefined && securityContext.captchaScore < 0.5) {\n                return {\n                    allowed: false,\n                    reason: \"CAPTCHA_FAILED\",\n                    securityContext\n                };\n            }\n            return {\n                allowed: true,\n                securityContext\n            };\n        } catch (error) {\n            console.error(\"Error verifying survey link access:\", error);\n            return {\n                allowed: false,\n                reason: \"INTERNAL_ERROR\",\n                securityContext: {\n                    authenticated: false,\n                    detectedVpn: false\n                }\n            };\n        }\n    },\n    /**\n   * Generate survey links using the custom domain\n   */ generateSurveyLink: (projectId, uid, type = \"short\")=>{\n        if (type === \"short\") {\n            return `${SHORT_URL_BASE}/${projectId}/${uid}`;\n        } else {\n            return `https://${MAIN_DOMAIN}/survey/${projectId}/${uid}`;\n        }\n    },\n    /**\n   * Generate completion page link using the custom domain\n   */ generateCompletionLink: (projectId, uid)=>{\n        return `https://${MAIN_DOMAIN}/completion/${projectId}/${uid}`;\n    },\n    /**\n   * Log security events to help with auditing and threat detection\n   */ logSecurityEvent: async (eventType, details)=>{\n        console.log(`[SECURITY_EVENT] ${eventType}:`, details);\n    // In a production environment, this would send events to a logging service\n    }\n};\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/lib/security-service.ts\n");

/***/ }),

/***/ "(api)/./src/pages/api/links/generate.ts":
/*!*****************************************!*\
  !*** ./src/pages/api/links/generate.ts ***!
  \*****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var nanoid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! nanoid */ \"nanoid\");\n/* harmony import */ var _lib_amplify_server_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/amplify-server-service */ \"(api)/./src/lib/amplify-server-service.ts\");\n/* harmony import */ var _lib_security_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/security-service */ \"(api)/./src/lib/security-service.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([nanoid__WEBPACK_IMPORTED_MODULE_0__, _lib_amplify_server_service__WEBPACK_IMPORTED_MODULE_1__, _lib_security_service__WEBPACK_IMPORTED_MODULE_2__]);\n([nanoid__WEBPACK_IMPORTED_MODULE_0__, _lib_amplify_server_service__WEBPACK_IMPORTED_MODULE_1__, _lib_security_service__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n// Domain configuration\nconst DOMAIN = \"https://protegeresearchsurvey.com\" || 0;\nconst SHORT_URL = \"https://https://protegeresearchsurvey.com/s\" || 0;\nasync function handler(req, res) {\n    if (req.method !== \"POST\") {\n        return res.status(405).json({\n            success: false,\n            message: \"Method not allowed\"\n        });\n    }\n    try {\n        const amplifyServerService = (0,_lib_amplify_server_service__WEBPACK_IMPORTED_MODULE_1__.getAmplifyServerService)();\n        const { projectId, originalUrl, count, vendorId, linkType, geoRestriction, testCount, liveCount } = req.body;\n        // Get client IP for security logging\n        const ip = req.headers[\"x-forwarded-for\"]?.toString() || req.socket.remoteAddress || \"unknown\";\n        // Log security event\n        await _lib_security_service__WEBPACK_IMPORTED_MODULE_2__.securityService.logSecurityEvent(\"LINK_GENERATION_ATTEMPT\", {\n            projectId,\n            vendorId,\n            ip,\n            count: count || (testCount && liveCount ? testCount + liveCount : 0)\n        });\n        if (!projectId || !originalUrl) {\n            return res.status(400).json({\n                success: false,\n                message: \"Missing required parameters\"\n            });\n        }\n        // Validate count logic\n        let totalCount = count;\n        if (testCount !== undefined && liveCount !== undefined) {\n            // If both test and live counts are provided, use those instead\n            totalCount = testCount + liveCount;\n            if (totalCount < 1 || totalCount > 1000) {\n                return res.status(400).json({\n                    success: false,\n                    message: \"Total count must be between 1 and 1000\"\n                });\n            }\n        } else {\n            // Otherwise use the total count value\n            if (!count || count < 1 || count > 1000) {\n                return res.status(400).json({\n                    success: false,\n                    message: \"Count must be between 1 and 1000\"\n                });\n            }\n        }\n        // Validate project exists\n        const projectResult = await amplifyServerService.getProject(projectId);\n        // Fix: Extract project correctly by accessing .data property\n        const project = projectResult.data;\n        if (!project) {\n            return res.status(404).json({\n                success: false,\n                message: \"Project not found\"\n            });\n        } // Validate vendor if provided\n        if (vendorId) {\n            const vendorResult = await amplifyServerService.getVendor(vendorId);\n            const vendor = vendorResult?.data;\n            if (!vendor) {\n                return res.status(404).json({\n                    success: false,\n                    message: \"Vendor not found\"\n                });\n            }\n            // Check if vendor belongs to this project by checking the ProjectVendor relationship\n            const projectVendorResult = await amplifyServerService.listProjectVendors({\n                and: [\n                    {\n                        projectId: {\n                            eq: projectId\n                        }\n                    },\n                    {\n                        vendorId: {\n                            eq: vendorId\n                        }\n                    }\n                ]\n            });\n            if (!projectVendorResult.data || projectVendorResult.data.length === 0) {\n                return res.status(400).json({\n                    success: false,\n                    message: \"Vendor does not belong to this project\"\n                });\n            }\n        }\n        // Generate links\n        const links = [];\n        const creationPromises = [];\n        // Handle mixed TEST/LIVE links if counts are provided\n        if (testCount !== undefined && liveCount !== undefined) {\n            // Generate TEST links\n            for(let i = 0; i < testCount; i++){\n                const uid = (0,nanoid__WEBPACK_IMPORTED_MODULE_0__.nanoid)(10); // Generate a short unique ID\n                const linkData = {\n                    projectId,\n                    uid,\n                    vendorId: vendorId || undefined,\n                    status: \"UNUSED\",\n                    metadata: JSON.stringify({\n                        originalUrl,\n                        linkType: \"TEST\",\n                        geoRestriction: geoRestriction && geoRestriction.length > 0 ? geoRestriction : undefined\n                    })\n                };\n                creationPromises.push(amplifyServerService.createSurveyLink(linkData));\n            }\n            // Generate LIVE links\n            for(let i = 0; i < liveCount; i++){\n                const uid = (0,nanoid__WEBPACK_IMPORTED_MODULE_0__.nanoid)(10); // Generate a short unique ID\n                const linkData = {\n                    projectId,\n                    uid,\n                    vendorId: vendorId || undefined,\n                    status: \"UNUSED\",\n                    metadata: JSON.stringify({\n                        originalUrl,\n                        linkType: \"LIVE\",\n                        geoRestriction: geoRestriction && geoRestriction.length > 0 ? geoRestriction : undefined\n                    })\n                };\n                creationPromises.push(amplifyServerService.createSurveyLink(linkData));\n            }\n        } else {\n            // Original behavior - generate all links of the same type\n            for(let i = 0; i < count; i++){\n                const uid = (0,nanoid__WEBPACK_IMPORTED_MODULE_0__.nanoid)(10); // Generate a short unique ID\n                const linkData = {\n                    projectId,\n                    uid,\n                    vendorId: vendorId || undefined,\n                    status: \"UNUSED\",\n                    metadata: JSON.stringify({\n                        originalUrl,\n                        linkType: linkType || \"LIVE\",\n                        geoRestriction: geoRestriction && geoRestriction.length > 0 ? geoRestriction : undefined\n                    })\n                };\n                creationPromises.push(amplifyServerService.createSurveyLink(linkData));\n            }\n        }\n        // Execute all creation promises\n        const createdLinksResults = await Promise.all(creationPromises);\n        // Get the created links with vendor information\n        const createdLinksResponse = await amplifyServerService.listSurveyLinksByProject(projectId);\n        // Sort by creation date with null safety\n        const sortedLinks = createdLinksResponse.data.filter((link)=>{\n            // Check if metadata contains originalUrl\n            try {\n                const metadata = link.metadata ? JSON.parse(link.metadata) : {};\n                return metadata.originalUrl === originalUrl;\n            } catch (e) {\n                return false;\n            }\n        }).sort((a, b)=>{\n            // Fix: Add null safety for date comparison\n            const dateA = a.createdAt ? new Date(a.createdAt).getTime() : 0;\n            const dateB = b.createdAt ? new Date(b.createdAt).getTime() : 0;\n            return dateB - dateA;\n        }).slice(0, totalCount);\n        // Get vendor information for links that have vendors\n        const vendorIds = sortedLinks.filter((link)=>link.vendorId).map((link)=>link.vendorId); // Add type assertion to ensure string type\n        const vendorResults = vendorIds.length > 0 ? await amplifyServerService.listVendors({\n            id: {\n                in: vendorIds\n            }\n        }) : {\n            data: []\n        };\n        const vendors = vendorResults.data.reduce((acc, vendor)=>{\n            // Fix: Add null safety for vendor id index access\n            if (vendor && vendor.id) {\n                // Extract vendor code from settings if it exists\n                let vendorCode = \"\";\n                try {\n                    const settings = vendor.settings ? JSON.parse(vendor.settings) : {};\n                    vendorCode = settings.code || \"\";\n                } catch (e) {\n                    // If parsing fails, use an empty string\n                    vendorCode = \"\";\n                }\n                acc[vendor.id] = {\n                    name: vendor.name || \"\",\n                    code: vendorCode\n                };\n            }\n            return acc;\n        }, {});\n        // Use the custom domain for link generation\n        const baseUrl = `https://${DOMAIN}`; // Format the response with complete URLs\n        const formattedLinks = sortedLinks.map((link)=>{\n            const fullUrl = `${baseUrl}/s/${projectId}/${link.uid}`;\n            // Extract data from metadata JSON\n            let linkMetadata = {};\n            try {\n                linkMetadata = link.metadata ? JSON.parse(link.metadata) : {};\n            } catch (e) {\n                // If parsing fails, use an empty object\n                linkMetadata = {};\n            }\n            // Get geo restriction data\n            let geoRestrictionData = null;\n            if (linkMetadata.geoRestriction) {\n                geoRestrictionData = linkMetadata.geoRestriction;\n            }\n            return {\n                id: link.id,\n                uid: link.uid,\n                originalUrl: linkMetadata.originalUrl || \"\",\n                status: link.status,\n                linkType: linkMetadata.linkType || \"LIVE\",\n                fullUrl: fullUrl,\n                geoRestriction: geoRestrictionData,\n                vendor: link.vendorId ? vendors[link.vendorId] : null,\n                createdAt: link.createdAt\n            };\n        });\n        // Log successful creation\n        await _lib_security_service__WEBPACK_IMPORTED_MODULE_2__.securityService.logSecurityEvent(\"LINK_GENERATION_SUCCESS\", {\n            projectId,\n            count: formattedLinks.length\n        });\n        return res.status(200).json({\n            success: true,\n            count: formattedLinks.length,\n            links: formattedLinks\n        });\n    } catch (error) {\n        console.error(\"Error generating links:\", error);\n        // Log error\n        await _lib_security_service__WEBPACK_IMPORTED_MODULE_2__.securityService.logSecurityEvent(\"LINK_GENERATION_ERROR\", {\n            // Fix: Handle unknown error type properly\n            error: error instanceof Error ? error.message : String(error)\n        });\n        return res.status(500).json({\n            success: false,\n            message: \"Failed to generate links\"\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/links/generate.ts\n");

/***/ }),

/***/ "(api)/./amplify_outputs.json":
/*!******************************!*\
  !*** ./amplify_outputs.json ***!
  \******************************/
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"auth":{"user_pool_id":"us-east-1_Gh00T12dW","aws_region":"us-east-1","user_pool_client_id":"5e5a5drp00jd43tr7ph1ceg412","identity_pool_id":"us-east-1:a0b02f73-93a3-4b52-b1cb-eaa306375a33","mfa_methods":["SMS"],"standard_required_attributes":["email"],"username_attributes":["email"],"user_verification_types":["email"],"groups":[],"mfa_configuration":"OPTIONAL","password_policy":{"min_length":8,"require_lowercase":true,"require_numbers":true,"require_symbols":true,"require_uppercase":true},"unauthenticated_identities_enabled":true},"data":{"url":"https://vth6pntotrhvfpxo2gwn3kzqry.appsync-api.us-east-1.amazonaws.com/graphql","aws_region":"us-east-1","api_key":"da2-ee26yqskvzfpjpquwbi53shbvu","default_authorization_type":"AWS_IAM","authorization_types":["API_KEY","AMAZON_COGNITO_USER_POOLS"],"model_introspection":{"version":1,"models":{"Project":{"name":"Project","fields":{"id":{"name":"id","isArray":false,"type":"ID","isRequired":true,"attributes":[]},"name":{"name":"name","isArray":false,"type":"String","isRequired":true,"attributes":[]},"description":{"name":"description","isArray":false,"type":"String","isRequired":false,"attributes":[]},"status":{"name":"status","isArray":false,"type":{"enum":"ProjectStatus"},"isRequired":false,"attributes":[]},"targetCompletions":{"name":"targetCompletions","isArray":false,"type":"Int","isRequired":true,"attributes":[]},"currentCompletions":{"name":"currentCompletions","isArray":false,"type":"Int","isRequired":true,"attributes":[]},"surveyUrl":{"name":"surveyUrl","isArray":false,"type":"String","isRequired":true,"attributes":[]},"createdAt":{"name":"createdAt","isArray":false,"type":"AWSDateTime","isRequired":true,"attributes":[]},"updatedAt":{"name":"updatedAt","isArray":false,"type":"AWSDateTime","isRequired":true,"attributes":[]},"settings":{"name":"settings","isArray":false,"type":"AWSJSON","isRequired":false,"attributes":[]}},"syncable":true,"pluralName":"Projects","attributes":[{"type":"model","properties":{}},{"type":"auth","properties":{"rules":[{"allow":"private","operations":["create","read","update","delete"]}]}}],"primaryKeyInfo":{"isCustomPrimaryKey":false,"primaryKeyFieldName":"id","sortKeyFieldNames":[]}},"Question":{"name":"Question","fields":{"id":{"name":"id","isArray":false,"type":"ID","isRequired":true,"attributes":[]},"projectId":{"name":"projectId","isArray":false,"type":"ID","isRequired":false,"attributes":[]},"text":{"name":"text","isArray":false,"type":"String","isRequired":true,"attributes":[]},"type":{"name":"type","isArray":false,"type":{"enum":"QuestionType"},"isRequired":false,"attributes":[]},"options":{"name":"options","isArray":false,"type":"AWSJSON","isRequired":false,"attributes":[]},"sequence":{"name":"sequence","isArray":false,"type":"Int","isRequired":true,"attributes":[]},"isRequired":{"name":"isRequired","isArray":false,"type":"Boolean","isRequired":true,"attributes":[]},"createdAt":{"name":"createdAt","isArray":false,"type":"AWSDateTime","isRequired":true,"attributes":[]},"updatedAt":{"name":"updatedAt","isArray":false,"type":"AWSDateTime","isRequired":true,"attributes":[]}},"syncable":true,"pluralName":"Questions","attributes":[{"type":"model","properties":{}},{"type":"auth","properties":{"rules":[{"allow":"private","operations":["create","read","update","delete"]}]}}],"primaryKeyInfo":{"isCustomPrimaryKey":false,"primaryKeyFieldName":"id","sortKeyFieldNames":[]}},"SurveyLink":{"name":"SurveyLink","fields":{"id":{"name":"id","isArray":false,"type":"ID","isRequired":true,"attributes":[]},"projectId":{"name":"projectId","isArray":false,"type":"ID","isRequired":false,"attributes":[]},"uid":{"name":"uid","isArray":false,"type":"String","isRequired":true,"attributes":[]},"status":{"name":"status","isArray":false,"type":{"enum":"SurveyLinkStatus"},"isRequired":false,"attributes":[]},"createdAt":{"name":"createdAt","isArray":false,"type":"AWSDateTime","isRequired":true,"attributes":[]},"updatedAt":{"name":"updatedAt","isArray":false,"type":"AWSDateTime","isRequired":true,"attributes":[]},"clickedAt":{"name":"clickedAt","isArray":false,"type":"AWSDateTime","isRequired":false,"attributes":[]},"completedAt":{"name":"completedAt","isArray":false,"type":"AWSDateTime","isRequired":false,"attributes":[]},"ipAddress":{"name":"ipAddress","isArray":false,"type":"String","isRequired":false,"attributes":[]},"userAgent":{"name":"userAgent","isArray":false,"type":"String","isRequired":false,"attributes":[]},"geoData":{"name":"geoData","isArray":false,"type":"AWSJSON","isRequired":false,"attributes":[]},"metadata":{"name":"metadata","isArray":false,"type":"AWSJSON","isRequired":false,"attributes":[]},"vendorId":{"name":"vendorId","isArray":false,"type":"ID","isRequired":false,"attributes":[]}},"syncable":true,"pluralName":"SurveyLinks","attributes":[{"type":"model","properties":{}},{"type":"auth","properties":{"rules":[{"allow":"private","operations":["create","read","update","delete"]},{"allow":"public","provider":"iam","operations":["read","update"]}]}}],"primaryKeyInfo":{"isCustomPrimaryKey":false,"primaryKeyFieldName":"id","sortKeyFieldNames":[]}},"Vendor":{"name":"Vendor","fields":{"id":{"name":"id","isArray":false,"type":"ID","isRequired":true,"attributes":[]},"name":{"name":"name","isArray":false,"type":"String","isRequired":true,"attributes":[]},"contactName":{"name":"contactName","isArray":false,"type":"String","isRequired":false,"attributes":[]},"contactEmail":{"name":"contactEmail","isArray":false,"type":"String","isRequired":false,"attributes":[]},"settings":{"name":"settings","isArray":false,"type":"AWSJSON","isRequired":false,"attributes":[]},"createdAt":{"name":"createdAt","isArray":false,"type":"AWSDateTime","isRequired":true,"attributes":[]},"updatedAt":{"name":"updatedAt","isArray":false,"type":"AWSDateTime","isRequired":true,"attributes":[]}},"syncable":true,"pluralName":"Vendors","attributes":[{"type":"model","properties":{}},{"type":"auth","properties":{"rules":[{"allow":"private","operations":["create","read","update","delete"]}]}}],"primaryKeyInfo":{"isCustomPrimaryKey":false,"primaryKeyFieldName":"id","sortKeyFieldNames":[]}},"ProjectVendor":{"name":"ProjectVendor","fields":{"id":{"name":"id","isArray":false,"type":"ID","isRequired":true,"attributes":[]},"projectId":{"name":"projectId","isArray":false,"type":"ID","isRequired":false,"attributes":[]},"vendorId":{"name":"vendorId","isArray":false,"type":"ID","isRequired":false,"attributes":[]},"quota":{"name":"quota","isArray":false,"type":"Int","isRequired":true,"attributes":[]},"currentCount":{"name":"currentCount","isArray":false,"type":"Int","isRequired":true,"attributes":[]},"createdAt":{"name":"createdAt","isArray":false,"type":"AWSDateTime","isRequired":true,"attributes":[]},"updatedAt":{"name":"updatedAt","isArray":false,"type":"AWSDateTime","isRequired":true,"attributes":[]}},"syncable":true,"pluralName":"ProjectVendors","attributes":[{"type":"model","properties":{}},{"type":"auth","properties":{"rules":[{"allow":"private","operations":["create","read","update","delete"]}]}}],"primaryKeyInfo":{"isCustomPrimaryKey":false,"primaryKeyFieldName":"id","sortKeyFieldNames":[]}}},"enums":{"ProjectStatus":{"name":"ProjectStatus","values":["ACTIVE","PAUSED","COMPLETED"]},"QuestionType":{"name":"QuestionType","values":["MULTIPLE_CHOICE","TEXT","COUNTRY","SCALE"]},"SurveyLinkStatus":{"name":"SurveyLinkStatus","values":["UNUSED","CLICKED","COMPLETED","DISQUALIFIED","QUOTA_FULL"]}},"nonModels":{}}},"version":"1.3"}');

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Flinks%2Fgenerate&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Flinks%2Fgenerate.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();